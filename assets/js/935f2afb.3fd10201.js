"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"GraphQL Schema Types","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"GraphQL Schema Types","href":"/leto/docs/graphql-schema-types/","docId":"graphql-schema-types/graphql-schema-types"},{"type":"link","label":"Scalars","href":"/leto/docs/graphql-schema-types/scalars","docId":"graphql-schema-types/scalars"},{"type":"link","label":"Enums","href":"/leto/docs/graphql-schema-types/enums","docId":"graphql-schema-types/enums"},{"type":"link","label":"Objects","href":"/leto/docs/graphql-schema-types/objects","docId":"graphql-schema-types/objects"},{"type":"link","label":"Inputs and Input Objects","href":"/leto/docs/graphql-schema-types/inputs-and-input-objects","docId":"graphql-schema-types/inputs-and-input-objects"},{"type":"link","label":"Unions","href":"/leto/docs/graphql-schema-types/unions","docId":"graphql-schema-types/unions"},{"type":"link","label":"Wrapping Types","href":"/leto/docs/graphql-schema-types/wrapping-types","docId":"graphql-schema-types/wrapping-types"},{"type":"link","label":"Non-Nullable","href":"/leto/docs/graphql-schema-types/non-nullable","docId":"graphql-schema-types/non-nullable"},{"type":"link","label":"Lists","href":"/leto/docs/graphql-schema-types/lists","docId":"graphql-schema-types/lists"},{"type":"link","label":"Abstract Types","href":"/leto/docs/graphql-schema-types/abstract-types","docId":"graphql-schema-types/abstract-types"},{"type":"link","label":"Advanced Types","href":"/leto/docs/graphql-schema-types/advanced-types","docId":"graphql-schema-types/advanced-types"}],"href":"/leto/docs/category/graphql-schema-types"},{"type":"category","label":"main","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leto - GraphQL Server","href":"/leto/docs/main/leto-graphql-server","docId":"main/leto-graphql-server"},{"type":"link","label":"Quickstart","href":"/leto/docs/main/quickstart","docId":"main/quickstart"},{"type":"link","label":"Examples","href":"/leto/docs/main/examples","docId":"main/examples"},{"type":"link","label":"Packages","href":"/leto/docs/main/packages","docId":"main/packages"},{"type":"link","label":"Web integrations","href":"/leto/docs/main/web-integrations","docId":"main/web-integrations"},{"type":"link","label":"Documentation","href":"/leto/docs/main/documentation","docId":"main/documentation"},{"type":"link","label":"Resolvers","href":"/leto/docs/main/resolvers","docId":"main/resolvers"},{"type":"link","label":"Validation","href":"/leto/docs/main/validation","docId":"main/validation"},{"type":"link","label":"Miscellaneous","href":"/leto/docs/main/miscellaneous","docId":"main/miscellaneous"},{"type":"link","label":"Solving the N+1 problem","href":"/leto/docs/main/solving-the-n+1-problem","docId":"main/solving-the-n+1-problem"},{"type":"link","label":"Extensions","href":"/leto/docs/main/extensions","docId":"main/extensions"},{"type":"link","label":"Directives","href":"/leto/docs/main/directives","docId":"main/directives"},{"type":"link","label":"Attachments","href":"/leto/docs/main/attachments","docId":"main/attachments"},{"type":"link","label":"Utilities","href":"/leto/docs/main/utilities","docId":"main/utilities"},{"type":"link","label":"Contributing","href":"/leto/docs/main/contributing","docId":"main/contributing"}],"href":"/leto/docs/category/main"},{"type":"category","label":"leto","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leto","href":"/leto/docs/leto/","docId":"leto/leto"},{"type":"link","label":"GraphQL Executor","href":"/leto/docs/leto/graphql-executor","docId":"leto/graphql-executor"},{"type":"link","label":"DataLoader","href":"/leto/docs/leto/dataloader","docId":"leto/dataloader"},{"type":"link","label":"Subscriptions and WebSockets","href":"/leto/docs/leto/subscriptions-and-websockets","docId":"leto/subscriptions-and-websockets"}],"href":"/leto/docs/category/leto"},{"type":"category","label":"leto_schema","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leto Schema","href":"/leto/docs/leto_schema/leto-schema","docId":"leto_schema/leto-schema"},{"type":"link","label":"GraphQL Schema","href":"/leto/docs/leto_schema/graphql-schema","docId":"leto_schema/graphql-schema"},{"type":"link","label":"GraphQL Types","href":"/leto/docs/leto_schema/graphql-types","docId":"leto_schema/graphql-types"},{"type":"link","label":"Schema and Document Validation Rules","href":"/leto/docs/leto_schema/schema-and-document-validation-rules","docId":"leto_schema/schema-and-document-validation-rules"},{"type":"link","label":"GraphQLException and GraphQLError","href":"/leto/docs/leto_schema/graphqlexception-and-graphqlerror","docId":"leto_schema/graphqlexception-and-graphqlerror"},{"type":"link","label":"Ctx and ScopedMap","href":"/leto/docs/leto_schema/ctx-and-scopedmap","docId":"leto_schema/ctx-and-scopedmap"},{"type":"link","label":"LookAhead","href":"/leto/docs/leto_schema/lookahead","docId":"leto_schema/lookahead"},{"type":"link","label":"Utilities","href":"/leto/docs/leto_schema/utilities","docId":"leto_schema/utilities"}],"href":"/leto/docs/category/leto_schema"},{"type":"category","label":"leto_generator","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leto Generator","href":"/leto/docs/leto_generator/leto-generator","docId":"leto_generator/leto-generator"},{"type":"link","label":"Table of contents","href":"/leto/docs/leto_generator/table-of-contents","docId":"leto_generator/table-of-contents"},{"type":"link","label":"Examples","href":"/leto/docs/leto_generator/examples","docId":"leto_generator/examples"},{"type":"link","label":"Annotations (Decorators)","href":"/leto/docs/leto_generator/annotations-decorators","docId":"leto_generator/annotations-decorators"},{"type":"link","label":"Dart Type to GraphQLType coercion","href":"/leto/docs/leto_generator/dart-type-to-graphqltype-coercion","docId":"leto_generator/dart-type-to-graphqltype-coercion"},{"type":"link","label":"Resolvers","href":"/leto/docs/leto_generator/resolvers","docId":"leto_generator/resolvers"},{"type":"link","label":"Global Configuration (build.yaml)","href":"/leto/docs/leto_generator/global-configuration-build.yaml","docId":"leto_generator/global-configuration-build.yaml"}],"href":"/leto/docs/category/leto_generator"},{"type":"category","label":"leto_shelf","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Leto Shelf","href":"/leto/docs/leto_shelf/leto-shelf","docId":"leto_shelf/leto-shelf"},{"type":"link","label":"Quickstart","href":"/leto/docs/leto_shelf/quickstart","docId":"leto_shelf/quickstart"},{"type":"link","label":"Install","href":"/leto/docs/leto_shelf/install","docId":"leto_shelf/install"},{"type":"link","label":"Server example","href":"/leto/docs/leto_shelf/server-example","docId":"leto_shelf/server-example"},{"type":"link","label":"Handlers","href":"/leto/docs/leto_shelf/handlers","docId":"leto_shelf/handlers"},{"type":"link","label":"Features and Utilities","href":"/leto/docs/leto_shelf/features-and-utilities","docId":"leto_shelf/features-and-utilities"},{"type":"link","label":"Middlewares","href":"/leto/docs/leto_shelf/middlewares","docId":"leto_shelf/middlewares"}],"href":"/leto/docs/category/leto_shelf"}]},"docs":{"graphql-schema-types/abstract-types":{"id":"graphql-schema-types/abstract-types","title":"Abstract Types","description":"Abstract types like Interfaces and Unions, require type resolution of its variants on execution. For that, we provide a couple of tools explained in the following sections. You can read the code that executes the following logic in package:leto\'s GraphQL.resolveAbstractType method.","sidebar":"tutorialSidebar"},"graphql-schema-types/advanced-types":{"id":"graphql-schema-types/advanced-types","title":"Advanced Types","description":"Provided Types","sidebar":"tutorialSidebar"},"graphql-schema-types/enums":{"id":"graphql-schema-types/enums","title":"Enums","description":"Enums are text values which are restricted to a set of predefined variants. Their behavior is similar to scalars and they don\'t have a nested fields.","sidebar":"tutorialSidebar"},"graphql-schema-types/graphql-schema-types":{"id":"graphql-schema-types/graphql-schema-types","title":"GraphQL Schema Types","description":"The GraphQL language provides multiple types for representing your exposed API and the required data structures for the input values. In the following sections we explain their usage within Leto and, in general, for GraphQL. Each section contains a link to the official GraphQL specification for more information.","sidebar":"tutorialSidebar"},"graphql-schema-types/inputs-and-input-objects":{"id":"graphql-schema-types/inputs-and-input-objects","title":"Inputs and Input Objects","description":"Input types specify the structure of the values that inputs to resolvers should have. Scalars and Enums can be passed as input to resolvers. Wrapper types such as List and NonNull types of Scalars and Enums, also can be passed, however for more complex Objects with nested fields you will need to use GraphQLInputObjectType. Similar GraphQLObjectType, a GraphQLInputObjectType can have fields.","sidebar":"tutorialSidebar"},"graphql-schema-types/lists":{"id":"graphql-schema-types/lists","title":"Lists","description":"GraphQLListType allows you to represent a collection of values.","sidebar":"tutorialSidebar"},"graphql-schema-types/non-nullable":{"id":"graphql-schema-types/non-nullable","title":"Non-Nullable","description":"GraphQLNonNullType allows you to represent a non-nullable or required value. By default, all GraphQL Types are nullable or optional, if you want to represent a required input or specify that a given output is always present (non-null), you want to use the GraphQLNonNullType wrapping type.","sidebar":"tutorialSidebar"},"graphql-schema-types/objects":{"id":"graphql-schema-types/objects","title":"Objects","description":"GraphQL objects allow you to specify a type with a set of fields or properties. Objects can only be outputs in a resolver. Each field can be of any output type.","sidebar":"tutorialSidebar"},"graphql-schema-types/scalars":{"id":"graphql-schema-types/scalars","title":"Scalars","description":"The fundamental building-block in the type system. Standard GraphQLScalarTypes: String, Int, Float, Boolean and ID types are already implemented and provided by Leto.","sidebar":"tutorialSidebar"},"graphql-schema-types/unions":{"id":"graphql-schema-types/unions","title":"Unions","description":"Similar to enums, Unions are restricted to a set of predefined variants, however the possible types are always the more complex GraphQLObjectType.","sidebar":"tutorialSidebar"},"graphql-schema-types/wrapping-types":{"id":"graphql-schema-types/wrapping-types","title":"Wrapping Types","description":"Wrapping types allow to modify the behavior of the inner (wrapped) type. The inner types can be of any GraphQLType and wrapping types can be Output or Input Types if the wrapped type is an Output or Input type. GraphQL has two wrapping types, GraphQLNonNullType and GraphQLListType.","sidebar":"tutorialSidebar"},"leto_generator/annotations-decorators":{"id":"leto_generator/annotations-decorators","title":"Annotations (Decorators)","description":"All annotations with documentation and the supported configuration parameters can be found in  package:letoschema\'s decorators file.","sidebar":"tutorialSidebar"},"leto_generator/dart-type-to-graphqltype-coercion":{"id":"leto_generator/dart-type-to-graphqltype-coercion","title":"Dart Type to GraphQLType coercion","description":"Dart types specified as fields of classes or input parameters in resolvers will be coerced into GraphQLTypes using the following rules.","sidebar":"tutorialSidebar"},"leto_generator/examples":{"id":"leto_generator/examples","title":"Examples","description":"Multiple examples with tests can be found in the examples folder.","sidebar":"tutorialSidebar"},"leto_generator/global-configuration-build.yaml":{"id":"leto_generator/global-configuration-build.yaml","title":"Global Configuration (build.yaml)","description":"You can make global configuration for the code generation with the build.yaml file at the root of your project (next to your pubspec.yaml). The following configurations can be specified:","sidebar":"tutorialSidebar"},"leto_generator/leto-generator":{"id":"leto_generator/leto-generator","title":"Leto Generator","description":"Generates package:leto_schema\'s GraphQLSchemas from annotated Dart classes and functions. This is a code-first generator which will generate different GraphQL elements based on annotations in Dart code.","sidebar":"tutorialSidebar"},"leto_generator/resolvers":{"id":"leto_generator/resolvers","title":"Resolvers","description":"Resolvers execute the main logic in an executable GraphQLSchema. These are functions that represent  queries, mutations or subscriptions.","sidebar":"tutorialSidebar"},"leto_generator/table-of-contents":{"id":"leto_generator/table-of-contents","title":"Table of contents","description":"- Examples","sidebar":"tutorialSidebar"},"leto_schema/ctx-and-scopedmap":{"id":"leto_schema/ctx-and-scopedmap","title":"Ctx and ScopedMap","description":"You can view a more thorough explanation in the main README.","sidebar":"tutorialSidebar"},"leto_schema/graphql-schema":{"id":"leto_schema/graphql-schema","title":"GraphQL Schema","description":"Each GraphQLSchema requires a GraphQLObjectType as the root query type and optional GraphQLObjectTypes for the mutation and subscription roots.","sidebar":"tutorialSidebar"},"leto_schema/graphql-types":{"id":"leto_schema/graphql-types","title":"GraphQL Types","description":"For a more thorough discussion about all the GraphQL types and their usage with Leto, please see the GraphQL Schema Types Documentation.","sidebar":"tutorialSidebar"},"leto_schema/graphqlexception-and-graphqlerror":{"id":"leto_schema/graphqlexception-and-graphqlerror","title":"GraphQLException and GraphQLError","description":"A GraphQLException is a list of GraphQLErrors.","sidebar":"tutorialSidebar"},"leto_schema/leto-schema":{"id":"leto_schema/leto-schema","title":"Leto Schema","description":"An implementation of GraphQL\'s type system in Dart. Supports any platform where Dart runs.","sidebar":"tutorialSidebar"},"leto_schema/lookahead":{"id":"leto_schema/lookahead","title":"LookAhead","description":"You can view an usage example in the main README.","sidebar":"tutorialSidebar"},"leto_schema/schema-and-document-validation-rules":{"id":"leto_schema/schema-and-document-validation-rules","title":"Schema and Document Validation Rules","description":"GraphQL schemas and documents can be validated for potential errors, misconfigurations, bad practices or perhaps","sidebar":"tutorialSidebar"},"leto_schema/utilities":{"id":"leto_schema/utilities","title":"Utilities","description":"Most GraphQL utilities can be found in the utilities folder in package:letoschema.","sidebar":"tutorialSidebar"},"leto_shelf/features-and-utilities":{"id":"leto_shelf/features-and-utilities","title":"Features and Utilities","description":"Some useful utilities and bindings for working with shelf HTTP requests and responses in Leto.","sidebar":"tutorialSidebar"},"leto_shelf/handlers":{"id":"leto_shelf/handlers","title":"Handlers","description":"This package provides shelf handlers for answering HTTP requests.","sidebar":"tutorialSidebar"},"leto_shelf/install":{"id":"leto_shelf/install","title":"Install","description":"Add dependencies to your pubspec.yaml","sidebar":"tutorialSidebar"},"leto_shelf/leto-shelf":{"id":"leto_shelf/leto-shelf","title":"Leto Shelf","description":"Leto GraphQL web server bindings and utilities for shelf.","sidebar":"tutorialSidebar"},"leto_shelf/middlewares":{"id":"leto_shelf/middlewares","title":"Middlewares","description":"Other shelf middlewares not really specific to GraphQL servers.","sidebar":"tutorialSidebar"},"leto_shelf/quickstart":{"id":"leto_shelf/quickstart","title":"Quickstart","description":"For more general information and examples for building GraphQL schemas and servers using Leto, please see the main repository\'s https://github.com/juancastillo0/leto README. This README only contains information associated with bindings and utilities for building Leto powered web servers with shelf.","sidebar":"tutorialSidebar"},"leto_shelf/server-example":{"id":"leto_shelf/server-example","title":"Server example","description":"A fullstack Dart example with Flutter client and Leto/Shelf server can be found in https://github.com/juancastillo0/leto/tree/main/chat_example","sidebar":"tutorialSidebar"},"leto/dataloader":{"id":"leto/dataloader","title":"DataLoader","description":"The DataLoader implementation is based on graphql/dataloader, the API and methods are basically the same. For usage examples please review the main README.","sidebar":"tutorialSidebar"},"leto/graphql-executor":{"id":"leto/graphql-executor","title":"GraphQL Executor","description":"The executor can be configured with the following parameters:","sidebar":"tutorialSidebar"},"leto/leto":{"id":"leto/leto","title":"Leto","description":"Base package for implementing GraphQL servers executors. The main entrypoint is the GraphQL.parseAndExecute method which parses a GraphQL document and executes it with the configured GraphQLSchema from package:leto_schema.","sidebar":"tutorialSidebar"},"leto/subscriptions-and-websockets":{"id":"leto/subscriptions-and-websockets","title":"Subscriptions and WebSockets","description":"GraphQL queries involving subscription operations can return","sidebar":"tutorialSidebar"},"main/attachments":{"id":"main/attachments","title":"Attachments","description":"This API is experimental.","sidebar":"tutorialSidebar"},"main/contributing":{"id":"main/contributing","title":"Contributing","description":"Thanks for considering making a contribution! Every issue or question helps!","sidebar":"tutorialSidebar"},"main/directives":{"id":"main/directives","title":"Directives","description":"For more information: GraphQL specification","sidebar":"tutorialSidebar"},"main/documentation":{"id":"main/documentation","title":"Documentation","description":"The following sections introduce most of the concepts and small examples of building GraphQL executable schemas and servers with Leto. Please, if there is something that may be missing from the documentation or you have any question you can make an issue, that would help us a lot.","sidebar":"tutorialSidebar"},"main/examples":{"id":"main/examples","title":"Examples","description":"Beside the tests from each package, you can find some usage example in the following directories and external repositories:","sidebar":"tutorialSidebar"},"main/extensions":{"id":"main/extensions","title":"Extensions","description":"Extensions implement additional functionalities to the server\'s parsing, validation and execution. For example, extensions for tracing (GraphQLTracingExtension), logging (GraphQLLoggingExtension), error handling or caching (GraphQLPersistedQueries and GraphQLCacheExtension). All extension implementations can be found in the extensions folder in package:leto. The main API with all the methods that can be overridden is found in this file.","sidebar":"tutorialSidebar"},"main/leto-graphql-server":{"id":"main/leto-graphql-server","title":"Leto - GraphQL Server","description":"A complete implementation of the official","sidebar":"tutorialSidebar"},"main/miscellaneous":{"id":"main/miscellaneous","title":"Miscellaneous","description":"GraphQLResult","sidebar":"tutorialSidebar"},"main/packages":{"id":"main/packages","title":"Packages","description":"This repository is a monorepo with the following packages","sidebar":"tutorialSidebar"},"main/quickstart":{"id":"main/quickstart","title":"Quickstart","description":"This provides a simple introduction to Leto, you can explore more in the following sections of this README or by looking at the tests, documentation and examples for each package. A fullstack Dart example with Flutter client and Leto/Shelf server can be found in https://github.com/juancastillo0/leto/tree/main/chat_example","sidebar":"tutorialSidebar"},"main/resolvers":{"id":"main/resolvers","title":"Resolvers","description":"GraphQL resolvers execute the logic for each field and return the expected value typed according to the schema. In Dart this are functions that receive the parent\'s object value and the field\'s Ctx, and return the execution result. Simple fields may only return a property of the parent object value. However, there may also be complex resolvers, such as mutations, that validate the input data and create rows in a database, or queries that retrieve multiple rows according to complex authorization logic.","sidebar":"tutorialSidebar"},"main/solving-the-n+1-problem":{"id":"main/solving-the-n+1-problem","title":"Solving the N+1 problem","description":"When fetching nested fields, a specific resolvers could be executed multiple times for each request since the parent object will execute it for all its children. This may pose a problem when the resolver has to do non-trivial work for each execution. For example, retrieving a row from a database. To solve this problem, Leto provides you with two tools: LookAhead and DataLoader.","sidebar":"tutorialSidebar"},"main/utilities":{"id":"main/utilities","title":"Utilities","description":"Most GraphQL utilities can be found in the utilities folder in package:letoschema.","sidebar":"tutorialSidebar"},"main/validation":{"id":"main/validation","title":"Validation","description":"Schema Validation","sidebar":"tutorialSidebar"},"main/web-integrations":{"id":"main/web-integrations","title":"Web integrations","description":"Although you can use packageleto to execute GraphQL requests in any Dart application, GraphQL servers are usually deployed to the web. We provide a couple of utilities and integrations for creating and using GraphQL web servers powered by Leto.","sidebar":"tutorialSidebar"}}}')}}]);