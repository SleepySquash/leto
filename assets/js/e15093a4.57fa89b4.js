"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6199],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(n),m=l,h=c["".concat(o,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=c;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,r[1]=p;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4765:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const i={sidebar_position:3},r="GraphQL Types",p={unversionedId:"leto_schema/graphql-types",id:"leto_schema/graphql-types",title:"GraphQL Types",description:"All of the GraphQL scalar types are built in, as well other additional types:",source:"@site/docs/leto_schema/graphql-types.md",sourceDirName:"leto_schema",slug:"/leto_schema/graphql-types",permalink:"/leto/docs/leto_schema/graphql-types",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_schema/README.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"GraphQL Schema",permalink:"/leto/docs/leto_schema/graphql-schema"},next:{title:"Schema and Document Validation Rules",permalink:"/leto/docs/leto_schema/schema-and-document-validation-rules"}},o={},s=[{value:"Additional types",id:"additional-types",level:2},{value:"Helpers and Extensions",id:"helpers-and-extensions",level:2},{value:"Methods on <code>GraphQLType</code>",id:"methods-on-graphqltype",level:3},{value:"Serialization and <code>SerdeCtx</code>",id:"serialization-and-serdectx",level:2},{value:"<code>SerdeCtx</code>",id:"serdectx",level:3},{value:"Validation",id:"validation",level:2},{value:"Non-Nullable Types",id:"non-nullable-types",level:2},{value:"List Types",id:"list-types",level:2},{value:"Input values and parameters",id:"input-values-and-parameters",level:3}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"graphql-types"},"GraphQL Types"),(0,l.kt)("p",null,"All of the GraphQL scalar types are built in, as well other additional types:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLString")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLId")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLBoolean")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLInt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLFloat"))),(0,l.kt)("h2",{id:"additional-types"},"Additional types"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLDate")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLBigInt")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLTimestamp")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"graphQLUri"))),(0,l.kt)("h2",{id:"helpers-and-extensions"},"Helpers and Extensions"),(0,l.kt)("p",null,"These are helpers to create a GraphQL types within Dart. Most of them can be found in the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/gen.dart"},"/lib/src/gen.dart file"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"objectType")," - Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLObjectType")," with fields"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"field")," - Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLField")," with a type/argument/resolver"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inputObjectType")," - Creates a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLInputObjectType")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inputField")," - Creates a field for a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLInputObjectType")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"listOf")," - Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLListType")," with the provided ",(0,l.kt)("inlineCode",{parentName:"li"},"innerType"))),(0,l.kt)("h3",{id:"methods-on-graphqltype"},"Methods on ",(0,l.kt)("inlineCode",{parentName:"h3"},"GraphQLType")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"list")," - Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLListType")," from the type"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nonNull")," - Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLNonNullType")," from the type"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nullable")," - Returns the inner type of ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLNonNullType")," or itself it it is nullable"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"field")," - Create a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLField")," (extension method)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inputField")," - Create a field for a ",(0,l.kt)("inlineCode",{parentName:"li"},"GraphQLInputObjectType")," (extension method)")),(0,l.kt)("p",null,"The extensions on ",(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLType")," with the ",(0,l.kt)("inlineCode",{parentName:"p"},"field")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"inputField")," methods are recommended over the\nglobal function to preserve the ",(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLType"),"'s generic type information."),(0,l.kt)("h2",{id:"serialization-and-serdectx"},"Serialization and ",(0,l.kt)("inlineCode",{parentName:"h2"},"SerdeCtx")),(0,l.kt)("p",null,"GraphQL types can ",(0,l.kt)("inlineCode",{parentName:"p"},"serialize")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"deserialize")," input data.\nThe exact implementation of this depends on the type."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final serdeCtx = SerdeCtx();\nfinal String iso8601String = graphQLDate.serialize(DateTime.now());\nfinal DateTime date = graphQLDate.deserialize(serdeCtx, iso8601String);\nprint(date.millisecondsSinceEpoch);\n")),(0,l.kt)("h3",{id:"serdectx"},(0,l.kt)("inlineCode",{parentName:"h3"},"SerdeCtx")),(0,l.kt)("p",null,"A Serialization and Deserialization Context (SerdeCtx) allows you to create types from serialized values.\nIt registers ",(0,l.kt)("inlineCode",{parentName:"p"},"Serializers")," for any type and can be used with generics."),(0,l.kt)("h2",{id:"validation"},"Validation"),(0,l.kt)("p",null,"GraphQL types can ",(0,l.kt)("inlineCode",{parentName:"p"},"validate")," input data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final validation = myType.validate('key', {...});\n\nif (validation.successful) {\n  doSomething(validation.value);\n} else {\n  print(validation.errors);\n}\n")),(0,l.kt)("h2",{id:"non-nullable-types"},"Non-Nullable Types"),(0,l.kt)("p",null,"You can easily make a type non-nullable by calling its ",(0,l.kt)("inlineCode",{parentName:"p"},"nonNull")," method."),(0,l.kt)("h2",{id:"list-types"},"List Types"),(0,l.kt)("p",null,"Support for list types is also included. Use the ",(0,l.kt)("inlineCode",{parentName:"p"},"listOf")," helper for convenience."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"/// A non-nullable list of non-nullable integers\nlistOf(graphQLInt.nonNull()).nonNull();\n")),(0,l.kt)("h3",{id:"input-values-and-parameters"},"Input values and parameters"),(0,l.kt)("p",null,"Take the following GraphQL query:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},'{\n   anime {\n     characters(title: "Hunter x Hunter") {\n        name\n        age\n     }\n   }\n}\n')),(0,l.kt)("p",null,"And subsequently, its schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-graphql"},"type AnimeQuery {\n  characters($title: String!): [Character!]\n}\n\ntype Character {\n  name: String\n  age: Int\n}\n")),(0,l.kt)("p",null,"The field ",(0,l.kt)("inlineCode",{parentName:"p"},"characters")," accepts a parameter, ",(0,l.kt)("inlineCode",{parentName:"p"},"title"),". To reproduce this in\n",(0,l.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),", use ",(0,l.kt)("inlineCode",{parentName:"p"},"GraphQLFieldInput"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final GraphQLObjectType queryType = objectType(\n  'AnimeQuery',\n  fields: [\n    field(\n      'characters',\n      listOf(characterType.nonNull()),\n      inputs: [\n        GraphQLFieldInput('title', graphQLString.nonNull()),\n      ],\n    ),\n  ],\n);\n\nfinal GraphQLObjectType characterType = objectType(\n  'Character',\n  fields: [\n    field('name', graphQLString),\n    field('age', graphQLInt),\n  ],\n);\n")),(0,l.kt)("p",null,"In the majority of cases where you use GraphQL, you will be delegate the\nactual fetching of data to a database object, or some asynchronous resolver\nfunction."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"package:leto_schema")," includes this functionality in the ",(0,l.kt)("inlineCode",{parentName:"p"},"resolve")," parameter,\nwhich is a function that receives the parent object and a ",(0,l.kt)("inlineCode",{parentName:"p"},"Ctx")," with a ",(0,l.kt)("inlineCode",{parentName:"p"},"Map<String, dynamic>"),"\nof input arguments."),(0,l.kt)("p",null,"A hypothetical example of the above might be:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-dart"},"final field = field(\n  'characters',\n  graphQLString,\n  resolve: (_, Ctx ctx) async {\n    final Stream<String> stream = await myDatabase.findCharacters(ctx.args['title']);\n    return stream;\n  },\n);\n")))}u.isMDXComponent=!0}}]);