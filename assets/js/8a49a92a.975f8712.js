"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2051],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),h=a,d=u["".concat(c,".").concat(h)]||u[h]||p[h]||r;return n?i.createElement(d,o(o({ref:t},m),{},{components:n})):i.createElement(d,o({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4456:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:14},o="Utilities",l={unversionedId:"main/utilities",id:"main/utilities",title:"Utilities",description:"Most GraphQL utilities can be found in the utilities folder in package:letoschema.",source:"@site/docs/main/utilities.md",sourceDirName:"main",slug:"/main/utilities",permalink:"/leto/docs/main/utilities",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Attachments",permalink:"/leto/docs/main/attachments"},next:{title:"Contributing",permalink:"/leto/docs/main/contributing"}},c={},s=[{value:"<code>buildSchema</code>",id:"buildschema",level:3},{value:"<code>printSchema</code>",id:"printschema",level:3},{value:"<code>extendSchema</code>",id:"extendschema",level:3},{value:"<code>introspectionQuery</code>",id:"introspectionquery",level:3},{value:"<code>mergeSchemas</code>",id:"mergeschemas",level:3},{value:"<code>schemaFromJson</code>",id:"schemafromjson",level:3}],m={toc:s};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"utilities"},"Utilities"),(0,a.kt)("p",null,"Most GraphQL utilities can be found in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities"},(0,a.kt)("inlineCode",{parentName:"a"},"utilities"))," folder in package:leto_schema."),(0,a.kt)("h3",{id:"buildschema"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/build_schema.dart"},(0,a.kt)("inlineCode",{parentName:"a"},"buildSchema"))),(0,a.kt)("p",null,"Create a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," from a GraphQL Schema Definition (SDL) document String."),(0,a.kt)("h3",{id:"printschema"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/print_schema.dart"},(0,a.kt)("inlineCode",{parentName:"a"},"printSchema"))),(0,a.kt)("p",null,"Transform a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," into a String in the GraphQL Schema Definition Language (SDL)."),(0,a.kt)("h3",{id:"extendschema"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/extend_schema.dart"},(0,a.kt)("inlineCode",{parentName:"a"},"extendSchema"))),(0,a.kt)("p",null,"Experimental. Extend a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," with an SDL document. This will return an extended ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," with the additional types, fields, inputs and directives provided in the document."),(0,a.kt)("h3",{id:"introspectionquery"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/introspection_query.dart"},(0,a.kt)("inlineCode",{parentName:"a"},"introspectionQuery"))),(0,a.kt)("p",null,"Create an introspection document query for retrieving Schema information from a GraphQL server."),(0,a.kt)("h3",{id:"mergeschemas"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/blob/main/leto_shelf/example/lib/schema/graphql_utils.dart"},(0,a.kt)("inlineCode",{parentName:"a"},"mergeSchemas"))),(0,a.kt)("p",null,"Experimental. Merge multiple ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema"),". The output ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," contains all the query, mutations and subscription fields from the input schemas. Nested objects are also merged."),(0,a.kt)("h3",{id:"schemafromjson"},(0,a.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/blob/main/leto_shelf/example/lib/schema/schema_from_json.dart"},(0,a.kt)("inlineCode",{parentName:"a"},"schemaFromJson"))),(0,a.kt)("p",null,"Experimental. Build a GraphQLSchema from a JSON value, will add query, mutation, subscription and custom events on top of the provided JSON value. Will try to infer the types from the JSON structure."))}p.isMDXComponent=!0}}]);