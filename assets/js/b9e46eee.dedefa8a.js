"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[6421],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=o,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},122:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:11},i="Extensions",s={unversionedId:"main/extensions",id:"main/extensions",title:"Extensions",description:"Extensions implement additional functionalities to the server's parsing, validation and execution. For example, extensions for tracing (GraphQLTracingExtension), logging (GraphQLLoggingExtension), error handling or caching (GraphQLPersistedQueries and GraphQLCacheExtension). All extension implementations can be found in the extensions folder in package:leto.",source:"@site/docs/main/extensions.md",sourceDirName:"main",slug:"/main/extensions",permalink:"/leto/docs/main/extensions",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Solving the N+1 problem",permalink:"/leto/docs/main/solving-the-n+1-problem"},next:{title:"Directives",permalink:"/leto/docs/main/directives"}},l={},p=[{value:"Persisted Queries",id:"persisted-queries",level:2},{value:"Apollo Tracing",id:"apollo-tracing",level:2},{value:"Response Cache",id:"response-cache",level:2},{value:"Logging Extension",id:"logging-extension",level:2},{value:"Map Error Extension",id:"map-error-extension",level:2},{value:"Custom Extensions",id:"custom-extensions",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"extensions"},"Extensions"),(0,o.kt)("p",null,"Extensions implement additional functionalities to the server's parsing, validation and execution. For example, extensions for tracing (",(0,o.kt)("a",{parentName:"p",href:"#apollo-tracing"},"GraphQLTracingExtension"),"), logging (",(0,o.kt)("a",{parentName:"p",href:"#logging-extension"},"GraphQLLoggingExtension"),"), error handling or caching (",(0,o.kt)("a",{parentName:"p",href:"#persisted_queries"},"GraphQLPersistedQueries")," and ",(0,o.kt)("a",{parentName:"p",href:"/leto/docs/main/extensions#response-cache"},"GraphQLCacheExtension"),"). All extension implementations can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions"},"extensions")," folder in ",(0,o.kt)("inlineCode",{parentName:"p"},"package:leto"),"."),(0,o.kt)("h2",{id:"persisted-queries"},"Persisted Queries"),(0,o.kt)("p",null,"Save network bandwidth by storing GraphQL documents on the server and not requiring the Client to send the full document String on each request."),(0,o.kt)("p",null,"More information: ",(0,o.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/performance/apq/"},"https://www.apollographql.com/docs/apollo-server/performance/apq/")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/persisted_queries.dart"},"Source code")),(0,o.kt)("h2",{id:"apollo-tracing"},"Apollo Tracing"),(0,o.kt)("p",null,"Trace the parsing, validation and execution of your GraphQL server to monitor execution times of all GraphQL requests."),(0,o.kt)("p",null,"More information: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-tracing"},"https://github.com/apollographql/apollo-tracing")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/tracing.dart"},"Source code")),(0,o.kt)("h2",{id:"response-cache"},"Response Cache"),(0,o.kt)("p",null,"Utility for caching responses in your GraphQL server and client."),(0,o.kt)("p",null,"Client GQL Link implementation in:\n// TODO: 2E"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Hash: Similar to HTTP If-None-Match and Etag headers. Computes a hash of the payload (sha1 by default) and returns it to the Client when requested. If the Client makes a request with a hash (computed locally or saved from a previous server response), the extension compares the hash and only returns the full body when the hash do not match. If the hash match, the client already has the last version of the payload.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"MaxAge: If passed a ",(0,o.kt)("inlineCode",{parentName:"p"},"Cache")," object, it will save the responses and compare the saved date with the current date, if the maxAge para is greater than the difference, it returns the cached value without executing the field's resolver.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"UpdatedAt: Similar to HTTP If-Modified-Since and Last-Modified headers."))),(0,o.kt)("p",null,"// TODO: 2E retrieve hash, updatedAt and maxAge in resolvers."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/cache_extension.dart"},"Source code")),(0,o.kt)("h2",{id:"logging-extension"},"Logging Extension"),(0,o.kt)("p",null,"The logging extension allows you monitor requests and responses executed by your server."),(0,o.kt)("p",null,"Provides some utilities for printing and retrieving information from execution, logging errors and provides a default ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLLog")," class that contains aggregated information about the request."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/logging_extension.dart"},"Source code")),(0,o.kt)("h2",{id:"map-error-extension"},"Map Error Extension"),(0,o.kt)("p",null,"Simple extension for mapping an error catched on resolver execution. "),(0,o.kt)("p",null,"With a function that receives the thrown error and some context as parameter and returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"GraphQLException?"),", this extension will override the error and pass it to the executor, which will eventually return it to the user as an error in the response's ",(0,o.kt)("inlineCode",{parentName:"p"},"errors")," list."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/map_error_extension.dart"},"Source code")),(0,o.kt)("h2",{id:"custom-extensions"},"Custom Extensions"),(0,o.kt)("p",null,"To create a custom extension you can extend ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/extension.dart"},(0,o.kt)("inlineCode",{parentName:"a"},"GraphQLExtension"))," and override the necessary functions, all of which are executed throughout a request's parsing, validation and execution."),(0,o.kt)("p",null,"To save state scoped to a single request you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScopedMap.setScoped(key, value)")," and retrieve the state in a different method with ",(0,o.kt)("inlineCode",{parentName:"p"},"final value = ScopedMap.get(key);"),". Where the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScopedMap")," can be accessed with ",(0,o.kt)("inlineCode",{parentName:"p"},"ctx.globals"),"."),(0,o.kt)("p",null,"All extensions are implemented in this way, so you can look at the source code for some examples."))}u.isMDXComponent=!0}}]);