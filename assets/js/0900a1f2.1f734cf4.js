"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4554],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7598:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:7},o="Resolvers",s={unversionedId:"main/resolvers",id:"main/resolvers",title:"Resolvers",description:"GraphQL resolvers execute the logic for each field and return the expected value typed according to the schema. In Dart this are functions that receive the parent's object value and the field's Ctx, and return the execution result. Simple fields may only return a property of the parent object value. However, there may also be complex resolvers, such as mutations, that validate the input data and create rows in a database, or queries that retrieve multiple rows according to complex authorization logic.",source:"@site/docs/main/resolvers.md",sourceDirName:"main",slug:"/main/resolvers",permalink:"/leto/docs/main/resolvers",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Documentation",permalink:"/leto/docs/main/documentation"},next:{title:"Validation",permalink:"/leto/docs/main/validation"}},l={},c=[{value:"Queries and Mutations",id:"queries-and-mutations",level:2},{value:"Subscriptions",id:"subscriptions",level:2},{value:"Examples",id:"examples",level:3},{value:"Request Contexts",id:"request-contexts",level:2},{value:"Ctx",id:"ctx",level:3},{value:"ObjectExecutionCtx",id:"objectexecutionctx",level:3},{value:"ExecutionCtx",id:"executionctx",level:3},{value:"RequestCtx",id:"requestctx",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"resolvers"},"Resolvers"),(0,r.kt)("p",null,"GraphQL resolvers execute the logic for each field and return the expected value typed according to the schema. In Dart this are functions that receive the parent's object value and the field's ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/resolvers#ctx"},(0,r.kt)("inlineCode",{parentName:"a"},"Ctx")),", and return the execution result. Simple fields may only return a property of the parent object value. However, there may also be complex resolvers, such as mutations, that validate the input data and create rows in a database, or queries that retrieve multiple rows according to complex authorization logic."),(0,r.kt)("h2",{id:"queries-and-mutations"},"Queries and Mutations"),(0,r.kt)("p",null,"Each field (",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectField"),") in an object type (",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),") contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," parameter, this will be used to resolve all fields. The first argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," with be the parent object, if this field is in the root Query or Mutation Object, the value will be the the root value passed as an argument to ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL.parseAndExecute")," and a ",(0,r.kt)("inlineCode",{parentName:"p"},"SubscriptionEvent")," if this is a subscription field (more in the ",(0,r.kt)("a",{parentName:"p",href:"#subscriptions"},"subscription")," section). The second argument will be the field's ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/resolvers#ctx"},(0,r.kt)("inlineCode",{parentName:"a"},"Ctx")),", with it you can access defined Refs with ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref.get(ctx)")," and view more information about the resolved field or GraphQL request. When using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_shelf"),", you can access the HTTP request and modify the HTTP response, more information in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_shelf"},"package's README"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Query {\n  someField: String\n}\n\ntype CustomMutation {\n  updateSomething(arg1: Float): Date\n}\n\n"""An ISO-8601 Date."""\nscalar Date\n\ntype schema {\n  query: Query\n  mutation: CustomMutation\n}\n\n')),(0,r.kt)("p",null,"In Dart:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final query = objectType(\n  'Query',\n  fields: [\n    graphQLString.field(\n      'someField',\n      resolve: (Object? rootObject, Ctx ctx) => 'someFieldOutput',\n    ),\n  ],\n);\n\nfinal customMutation = objectType(\n  'CustomMutation',\n  fields: [\n    graphQLDate.field(\n      'updateSomething',\n      inputs: [\n        graphQLFloat.inputField('arg1')\n      ],\n      resolve: (Object? rootObject, Ctx ctx) {\n        final arg1 = ctx.args['arg1'] as double?;\n        return DateTime.now();\n      },\n    ),\n  ],\n);\n\nfinal schema = GraphQLSchema(\n  queryType: query,\n  mutation: customMutation,\n);\n\n")),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_shelf"),", POST requests can be used for Queries or Mutations. However, GET requests can only be used for Queries, if a Mutation operation is sent using a GET request, the server will return a 405 status code (MethodNotAllowed) following the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphql/graphql-over-http/blob/main/spec/GraphQLOverHTTP.md"},"GraphQL over HTTP specification"),"."),(0,r.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,r.kt)("p",null,"Each field (",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectField"),") in an object type (",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),") contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," parameter that receives the root value and a ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctx"),", and returns a Stream of values of the field's type ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream<T> Function(Ctx<P> ctx, P parent)"),". The Stream of values will be returned in the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," field of the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLResult")," returned on execution."),(0,r.kt)("p",null,"If using a WebSocket server, the client should support either ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-transport-ws")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-ws")," sub-protocols."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"\nfinal apiSchema = GraphQLSchema(\n  queryType: objectType('Query'),\n  subscriptionType: objectType(\n    'Subscription',\n    fields: [\n      graphQLInt.nonNull().fields(\n        'secondsSinceSubscription',\n        subscribe: (Ctx ctx, Object rootValue) {\n          return Stream.periodic(const Duration(seconds: 1), (secs) {\n            return secs;\n          });\n        }\n      ),\n    ]\n  ),\n);\n\nFuture<void> main() async {\n  final GraphQLResult result = await GraphQL(apiSchema).parseAndExecute(\n    'subscription { secondsSinceSubscription }',\n  );\n\n  assert(result.isSubscription);\n  final Stream<GraphQLResult> stream = result.subscriptionStream!;\n  stream.listen((event) {\n    final data = event.data as Map<String, Object?>;\n    assert(data['secondsSinceSubscription'] is int);\n\n    print(data['secondsSinceSubscription']);\n  });\n}\n\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," callback in a subscription field will always receive a ",(0,r.kt)("inlineCode",{parentName:"p"},"SubscriptionEvent")," as it's parent.\nFrom that you can access the event value with ",(0,r.kt)("inlineCode",{parentName:"p"},"SubscriptionEvent.value")," which will be the emitted by the Stream returned in the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," callback. The error handling in each callback is different, if an error is thrown in the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," callback, the Stream will end with an error. But if you throw an error in the ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," callback it will continue sending events, just the event resolved with a thrown Object will have ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLError"),"s as a result of processing the thrown Object (More information in ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/miscellaneous#error-handling"},"Error Handling"),")."),(0,r.kt)("p",null,"For usage in a web server you can use any of the ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/web-integrations"},"web server integrations")," which support WebSocket subscriptions (For example, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_shelf"},"leto_shelf"),")."),(0,r.kt)("h3",{id:"examples"},"Examples"),(0,r.kt)("p",null,"For a complete subscriptions example with events from a database please see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/chat_example"},"chat_example"),", in particular the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/chat_example/server/lib/events"},"events")," directory."),(0,r.kt)("h2",{id:"request-contexts"},"Request Contexts"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctx"),"s implement ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobalsHolder"),", so that then can be used to retrieve values from the scoped map, more in ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/miscellaneous#scopedmap"},(0,r.kt)("inlineCode",{parentName:"a"},"ScopedMap")),"."),(0,r.kt)("h3",{id:"ctx"},"Ctx"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto_schema/lib/src/req_ctx.dart"},"Source Code")),(0,r.kt)("p",null,"A unique context for each field resolver"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"args: the arguments passed as inputs to this field"),(0,r.kt)("li",{parentName:"ul"},"object: the parent Object's value, same as the first parameter of ",(0,r.kt)("inlineCode",{parentName:"li"},"resolve"),"."),(0,r.kt)("li",{parentName:"ul"},"objectCtx: the parent Object's execution context (",(0,r.kt)("a",{parentName:"li",href:"/leto/docs/main/resolvers#objectexecutionctx"},"ObjectExecutionCtx"),")"),(0,r.kt)("li",{parentName:"ul"},"field: The ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQLObjectField")," being resolved"),(0,r.kt)("li",{parentName:"ul"},"path: The path to this field"),(0,r.kt)("li",{parentName:"ul"},"executionCtx: The request's execution context (",(0,r.kt)("a",{parentName:"li",href:"/leto/docs/main/resolvers#executionctx"},"ExecutionCtx"),")"),(0,r.kt)("li",{parentName:"ul"},"lookahead: A function for retrieving nested selected fields. More in the ",(0,r.kt)("a",{parentName:"li",href:"/leto/docs/main/solving-the-n+1-problem#lookahead-eager-loading"},"LookAhead section"))),(0,r.kt)("h3",{id:"objectexecutionctx"},"ObjectExecutionCtx"),(0,r.kt)("p",null,"This is the context associated with an object execution, can be retrieved through ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctx.objectCtx"),". There will be as many instances as there are objects to execute in the request. Contains the value of the object, the field selections and the path in the GraphQL request to this object."),(0,r.kt)("h3",{id:"executionctx"},"ExecutionCtx"),(0,r.kt)("p",null,"This is the context associated with the execution phase of the request, created after the validation phase.\nContains validated and coerced (parsed) input values and the specific validated operation within the request's document to execute. It has an ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," list with the encountered errors during execution. Can be retrieved with ",(0,r.kt)("inlineCode",{parentName:"p"},"ObjectExecutionCtx.executionCtx"),"."),(0,r.kt)("h3",{id:"requestctx"},"RequestCtx"),(0,r.kt)("p",null,"This is the base context associated with the request, contains the raw information about the GraphQL document, the raw (not validated nor parsed) input values, input extensions, the schema, root value and the scoped map for this request. Can be retrieved with ",(0,r.kt)("inlineCode",{parentName:"p"},"ExecutionCtx.requestCtx"),"."))}u.isMDXComponent=!0}}]);