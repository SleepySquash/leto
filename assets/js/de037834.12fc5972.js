"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4323],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),o=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=o(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=o(t),y=a,m=u["".concat(s,".").concat(y)]||u[y]||d[y]||l;return t?r.createElement(m,p(p({ref:n},c),{},{components:t})):r.createElement(m,p({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,p=new Array(l);p[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var o=2;o<l;o++)p[o]=t[o];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3296:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>o});var r=t(7462),a=(t(7294),t(3905));const l={sidebar_position:11},p="Advanced Types",i={unversionedId:"graphql-schema-types/advanced-types",id:"graphql-schema-types/advanced-types",title:"Advanced Types",description:"Provided Types",source:"@site/docs/graphql-schema-types/advanced-types.md",sourceDirName:"graphql-schema-types",slug:"/graphql-schema-types/advanced-types",permalink:"/leto/docs/graphql-schema-types/advanced-types",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Abstract Types",permalink:"/leto/docs/graphql-schema-types/abstract-types"},next:{title:"main",permalink:"/leto/docs/category/main"}},s={},o=[{value:"Provided Types",id:"provided-types",level:3},{value:"Cyclic Types",id:"cyclic-types",level:3},{value:"Custom Scalars",id:"custom-scalars",level:3},{value:"Generic Types",id:"generic-types",level:3}],c={toc:o};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"advanced-types"},"Advanced Types"),(0,a.kt)("h3",{id:"provided-types"},"Provided Types"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PageInfo: Following the ",(0,a.kt)("a",{parentName:"li",href:"https://relay.dev/graphql/connections.htm"},"relay connections spec"),".")),(0,a.kt)("h3",{id:"cyclic-types"},"Cyclic Types"),(0,a.kt)("p",null,"Types which use themselves in their definition have to reuse previously created instances. The type's field lists are mutable, which allow you to instantiate the type and then modify the fields of the type. For example, an User with friends:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class User {\n  const User(this.friends);\n  final List<User> friends;\n}\nGraphQLObjectType<User>? _type;\nGraphQLObjectType<User> get userGraphQLType {\n  if (_type != null) return _type; // return a previous instance\n  final type = objectType<User>(\n    'User',\n    // leave fields empty (or don't pass them)\n    fields: [],\n  );\n  _type = type; // set the cached value\n  type.fields.addAll([ // add the fields\n    listOf(userGraphQLType.nonNull()).nonNull().field(\n      'friends',\n      resolve: (obj, _) => obj.friends,\n    ),\n  ]);\n  return type;\n}\n")),(0,a.kt)("p",null,"Code generation already does it, so you don't have to worry about it when using it."),(0,a.kt)("h3",{id:"custom-scalars"},"Custom Scalars"),(0,a.kt)("p",null,"You can extend the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLScalarType")," or create an instance directly with ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLScalarTypeValue"),". For example, to support the ",(0,a.kt)("inlineCode",{parentName:"p"},"Decimal")," type from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/a14n/dart-decimal"},"https://github.com/a14n/dart-decimal")," you can use the following code:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:decimal/decimal.dart';\nimport 'package:leto_schema/leto_schema.dart';\n\nexport 'package:decimal/decimal.dart';\n\nfinal decimalGraphQLType = GraphQLScalarTypeValue<Decimal, String>(\n  name: 'Decimal',\n  deserialize: (_, serialized) => decimalFromJson(serialized)!,\n  serialize: (value) => decimalToJson(value)!,\n  validate: (key, input) => (input is num || input is String) &&\n          Decimal.tryParse(input.toString()) != null\n      ? ValidationResult.ok(input.toString())\n      : ValidationResult.failure(\n          ['Expected $key to be a number or a numeric String.'],\n        ),\n  description: 'A number that allows computation without losing precision.',\n  specifiedByURL: null,\n);\n\nDecimal? decimalFromJson(Object? value) =>\n    value == null ? null : Decimal.parse(value as String);\n\nString? decimalToJson(Decimal? value) => value?.toString();\n")),(0,a.kt)("p",null,"For code generation you need to provide ",(0,a.kt)("inlineCode",{parentName:"p"},"customTypes")," in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/build/blob/master/docs/faq.md"},"build.yaml")," file of you project:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'target:\n  default:\n    builders:\n      leto_generator:\n        options:\n          customTypes:\n            - name: "Decimal"\n            import: "package:<your_package_name>/<path_to_implementation>.dart"\n            getter: "decimalGraphQLType"\n')),(0,a.kt)("h3",{id:"generic-types"},"Generic Types"),(0,a.kt)("p",null,"Work in progress"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"\nclass ErrC<T> {\n  final String? message;\n  final T value;\n\n  const ErrC(this.value, [this.message]);\n}\n\nGraphQLObjectType<ErrC<T?>> errCGraphQlType<T extends Object>(\n  GraphQLType<T, Object> tGraphQlType, {\n      String? name,\n  }\n) {\n  return objectType(\n      name ?? 'ErrC${tGraphQlType is GraphQLTypeWrapper ? (tGraphQlType as GraphQLTypeWrapper).ofType : tGraphQlType}',\n      isInterface: false,\n      interfaces: [],\n      description: null,\n    fields: [\n      field('message', graphQLString,\n          resolve: (obj, ctx) => obj.message,),\n      field('value', tGraphQlType,\n          resolve: (obj, ctx) => obj.value,)\n    ],\n  );\n}\n\n\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"With code generation")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:leto/leto.dart';\npart 'errc.g.dart';\n\n@GraphQLObject()\nclass ErrC<T> {\n  final String? message;\n  final T value;\n\n  const ErrC(this.value, [this.message]);\n}\n")),(0,a.kt)("p",null,"Which generates in 'errc.g.dart':"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"\nMap<String, GraphQLObjectType<ErrC>> _errCGraphQlType = {};\n\n/// Auto-generated from [ErrC].\nGraphQLObjectType<ErrC<T>> errCGraphQlType<T extends Object>(\n  GraphQLType<T, Object> tGraphQlType,\n) {\n  final __name =\n      'ErrC${tGraphQlType is GraphQLTypeWrapper ? (tGraphQlType as GraphQLTypeWrapper).ofType : tGraphQlType}';\n  if (_errCGraphQlType[__name] != null)\n    return _errCGraphQlType[__name]! as GraphQLObjectType<ErrC<T>>;\n\n  final __errCGraphQlType = objectType<ErrC<T>>(\n      'ErrC${tGraphQlType is GraphQLTypeWrapper ? (tGraphQlType as GraphQLTypeWrapper).ofType : tGraphQlType}',\n      isInterface: false,\n      interfaces: [],\n      description: null);\n  _errCGraphQlType[__name] = __errCGraphQlType;\n  __errCGraphQlType.fields.addAll(\n    [\n      field('message', graphQLString,\n          resolve: (obj, ctx) => obj.message,\n          inputs: [],\n          description: null,\n          deprecationReason: null),\n      field('value', tGraphQlType.nonNull(),\n          resolve: (obj, ctx) => obj.value,\n          inputs: [],\n          description: null,\n          deprecationReason: null)\n    ],\n  );\n\n  return __errCGraphQlType;\n}\n\n")))}d.isMDXComponent=!0}}]);