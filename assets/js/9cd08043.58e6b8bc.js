"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7559],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},l=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(a),u=n,d=m["".concat(s,".").concat(u)]||m[u]||h[u]||o;return a?r.createElement(d,i(i({ref:t},l),{},{components:a})):r.createElement(d,i({ref:t},l))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var c=2;c<o;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9069:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:2},i="GraphQL Schema",p={unversionedId:"leto_schema/graphql-schema",id:"leto_schema/graphql-schema",title:"GraphQL Schema",description:"Each GraphQLSchema requires a GraphQLObjectType as the root query type and optional GraphQLObjectTypes for the mutation and subscription roots.",source:"@site/docs/leto_schema/graphql-schema.md",sourceDirName:"leto_schema",slug:"/leto_schema/graphql-schema",permalink:"/leto/docs/leto_schema/graphql-schema",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_schema/README.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Leto Schema",permalink:"/leto/docs/leto_schema/leto-schema"},next:{title:"GraphQL Types",permalink:"/leto/docs/leto_schema/graphql-types"}},s={},c=[{value:"Resolvers",id:"resolvers",level:2}],l={toc:c};function h(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"graphql-schema"},"GraphQL Schema"),(0,n.kt)("p",null,"Each ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," requires a ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType")," as the root query type and optional ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObjectType"),"s for the mutation and subscription roots."),(0,n.kt)("p",null,"You can provide a list of directive definitions (",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLDirectives"),") that can be used within the schema or by documents executed by the schema. The directives will be extended if any of the types or fields have a ",(0,n.kt)("a",{parentName:"p",href:"/leto/docs/main/attachments#todirectivevalue"},(0,n.kt)("inlineCode",{parentName:"a"},"ToDirectiveValue"))," attachment."),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," has an optional ",(0,n.kt)("inlineCode",{parentName:"p"},"description")," ",(0,n.kt)("inlineCode",{parentName:"p"},"String")," that can be used as documentation and a ",(0,n.kt)("a",{parentName:"p",href:"#serialization-and-serdectx"},(0,n.kt)("inlineCode",{parentName:"a"},"SerdeCtx"))," for deserialization of input types. The ",(0,n.kt)("inlineCode",{parentName:"p"},"astNode")," (",(0,n.kt)("inlineCode",{parentName:"p"},"SchemaDefinitionNode"),") will be set when the schema is created with ",(0,n.kt)("a",{parentName:"p",href:"/leto/docs/leto_schema/utilities#buildschema"},(0,n.kt)("inlineCode",{parentName:"a"},"buildSchema")),"."),(0,n.kt)("p",null,"To validate the schema definition, following ",(0,n.kt)("a",{parentName:"p",href:"https://spec.graphql.org/draft/#sec-Type-System"},"the specification"),",\nyou can use the ",(0,n.kt)("inlineCode",{parentName:"p"},"validateSchema(GraphQLSchema)")," function which returns the ",(0,n.kt)("inlineCode",{parentName:"p"},"List<GraphQLError>")," found during validation."),(0,n.kt)("h2",{id:"resolvers"},"Resolvers"),(0,n.kt)("p",null,"Each field in an object type can provide a ",(0,n.kt)("inlineCode",{parentName:"p"},"resolve")," callback to return the value when a GraphQL operation is executed over the schema."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"final nameField = field(\n  'name',\n  graphQLString,\n  resolve: (Object parentObject, Ctx ctx) => 'Example Name',\n  // or pass the subscribe parameter if it is a subscription.\n  // The return type should be a Stream\n)\n")),(0,n.kt)("p",null,"For a more thorough discussion about resolvers please see the resolvers section in the ",(0,n.kt)("a",{parentName:"p",href:"/leto/docs/main/resolvers"},"main Documentation"),"."))}h.isMDXComponent=!0}}]);