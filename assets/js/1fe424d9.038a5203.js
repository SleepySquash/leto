"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,y=u["".concat(p,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(y,i(i({ref:t},s),{},{components:n})):a.createElement(y,i({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:5},i="Dart Type to GraphQLType coercion",l={unversionedId:"leto_generator/dart-type-to-graphqltype-coercion",id:"leto_generator/dart-type-to-graphqltype-coercion",title:"Dart Type to GraphQLType coercion",description:"Dart types specified as fields of classes or input parameters in resolvers will be coerced into GraphQLTypes using the following rules.",source:"@site/docs/leto_generator/dart-type-to-graphqltype-coercion.md",sourceDirName:"leto_generator",slug:"/leto_generator/dart-type-to-graphqltype-coercion",permalink:"/leto/docs/leto_generator/dart-type-to-graphqltype-coercion",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_generator/README.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Annotations (Decorators)",permalink:"/leto/docs/leto_generator/annotations-decorators"},next:{title:"Resolvers",permalink:"/leto/docs/leto_generator/resolvers"}},p={},d=[{value:"Default type mappings",id:"default-type-mappings",level:2},{value:"Provided type annotations",id:"provided-type-annotations",level:2},{value:"Class.graphQLType static getter",id:"classgraphqltype-static-getter",level:2},{value:"customTypes in build.yaml",id:"customtypes-in-buildyaml",level:2},{value:"@GraphQLDocumentation(type: Function, typeName: String)",id:"graphqldocumentationtype-function-typename-string",level:2}],s={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dart-type-to-graphqltype-coercion"},"Dart Type to GraphQLType coercion"),(0,r.kt)("p",null,"Dart types specified as fields of classes or input parameters in resolvers will be coerced into ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType"),"s using the following rules."),(0,r.kt)("h2",{id:"default-type-mappings"},"Default type mappings"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Dart Type"),(0,r.kt)("th",{parentName:"tr",align:null},"GraphQL Type"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String")),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Int")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"double"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"num")),(0,r.kt)("td",{parentName:"tr",align:null},"Float")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"String"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"int")," (with ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," as name, configurable)"),(0,r.kt)("td",{parentName:"tr",align:null},"ID")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"List<T>")),(0,r.kt)("td",{parentName:"tr",align:null},"[T]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"DateTime")),(0,r.kt)("td",{parentName:"tr",align:null},"Date (custom scalar)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Uri")),(0,r.kt)("td",{parentName:"tr",align:null},"Uri (custom scalar)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BigInt")),(0,r.kt)("td",{parentName:"tr",align:null},"BigInt (custom scalar)")))),(0,r.kt)("p",null,"By default, a non-nullable Dart ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," (or any type) represents a GraphQL ",(0,r.kt)("inlineCode",{parentName:"p"},"String!")," and a nullable Dart ",(0,r.kt)("inlineCode",{parentName:"p"},"String?")," represents a GraphQL ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", however that can be ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/global-configuration-build.yaml#nullablefields-default-false"},"configured")," for each field, class or for the whole project."),(0,r.kt)("h2",{id:"provided-type-annotations"},"Provided type annotations"),(0,r.kt)("p",null,"Using the provided ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/annotations-decorators"},"type annotations"),", a GraphQLType will be created for the given class or enum. You can use any type with a type annotation as part of another type or in the definition of a resolver function."),(0,r.kt)("h2",{id:"classgraphqltype-static-getter"},"Class.graphQLType static getter"),(0,r.kt)("p",null,"If you have control over the class definition, you can provide a static ",(0,r.kt)("inlineCode",{parentName:"p"},"graphQLType")," getter in the class. This will be used as the GraphQL type in other parts of code generation. "),(0,r.kt)("p",null,"Typically used for scalar types that you control (not from another package) or for generic types that need more customization (usage of ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLUnionType.extractInner")," for example)."),(0,r.kt)("p",null,"Some examples of this are the ",(0,r.kt)("inlineCode",{parentName:"p"},"Json"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"PageInfo")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Result<T, E>")," provided types."),(0,r.kt)("h2",{id:"customtypes-in-buildyaml"},"customTypes in build.yaml"),(0,r.kt)("p",null,"Another way of mapping a Dart type to a ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType"),' instance is by using the "customTypes" ',(0,r.kt)("inlineCode",{parentName:"p"},"build.yaml")," global config option explained in the ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/global-configuration-build.yaml#customtypes"},"customTypes")," section. This will override (take precedence over) all other type mappings."),(0,r.kt)("p",null,"Useful for types that you don't control like the ",(0,r.kt)("inlineCode",{parentName:"p"},"Decimal")," type from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/a14n/dart-decimal"},"https://github.com/a14n/dart-decimal")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"IsoDuration")," from ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/mzdm/iso_duration_parser"},"https://github.com/mzdm/iso_duration_parser"),"."),(0,r.kt)("h2",{id:"graphqldocumentationtype-function-typename-string"},"@GraphQLDocumentation(type: Function, typeName: String)"),(0,r.kt)("p",null,"If you want to customize a single field or argument with a GraphQLType different from the one inferred by the library, you can provide a static function (",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType Function()"),") which returns the expected type in the ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," parameter of ",(0,r.kt)("inlineCode",{parentName:"p"},"@GraphQLDocumentation(type: )"),". For the same purpose, we provide a ",(0,r.kt)("inlineCode",{parentName:"p"},"typeName")," String value, which should be the getter (in Dart code) of the expected ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLType"),". The code generation will throw an exception if you provide both at the same time."))}c.isMDXComponent=!0}}]);