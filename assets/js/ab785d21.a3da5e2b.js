"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4932],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,b=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(b,i(i({ref:t},c),{},{components:n})):r.createElement(b,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:4},i="Subscriptions and Web Socket",s={unversionedId:"leto/subscriptions-and-web-socket",id:"leto/subscriptions-and-web-socket",title:"Subscriptions and Web Socket",description:"GraphQL queries involving subscription operations can return",source:"@site/docs/leto/subscriptions-and-web-socket.md",sourceDirName:"leto",slug:"/leto/subscriptions-and-web-socket",permalink:"/leto/docs/leto/subscriptions-and-web-socket",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto/README.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"DataLoader",permalink:"/leto/docs/leto/dataloader"},next:{title:"leto_schema",permalink:"/leto/docs/category/leto_schema"}},l={},p=[{value:"Web Socket implementation",id:"web-socket-implementation",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"subscriptions-and-web-socket"},"Subscriptions and Web Socket"),(0,o.kt)("p",null,"GraphQL queries involving ",(0,o.kt)("inlineCode",{parentName:"p"},"subscription")," operations can return\na ",(0,o.kt)("inlineCode",{parentName:"p"},"Stream"),". Ultimately, the transport for relaying subscription\nevents to clients is not specified in the GraphQL spec, so it's\nup to you. We provide a ",(0,o.kt)("a",{parentName:"p",href:"/leto/docs/leto/subscriptions-and-web-socket#web-socket-implementation"},"Web Socket Server implementation"),"."),(0,o.kt)("p",null,"Note that in a schema like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-graphql"},"type TodoSubscription {\n    onTodo: TodoAdded!\n}\n\ntype TodoAdded {\n    id: ID!\n    text: String!\n    isComplete: Bool\n}\n")),(0,o.kt)("p",null,"Your Dart schema's field ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"onTodo")," should return a ",(0,o.kt)("inlineCode",{parentName:"p"},"Stream"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"field(\n  'onTodo',\n  todoAddedType,\n  subscribe: (_, RecCtx ctx) {\n    return someStreamOfTodos();\n  },\n);\n")),(0,o.kt)("h2",{id:"web-socket-implementation"},"Web Socket implementation"),(0,o.kt)("p",null,"For the purposes of reusing existing tooling (i.e. JS clients, etc.),\n",(0,o.kt)("inlineCode",{parentName:"p"},"package:leto")," rolls with an implementation of Apollo's ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-ws")," spec.\nThe implementation also supports the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql-transport-ws")," subprotocol."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"NOTE: At this point, Apollo's spec is extremely out-of-sync with the protocol their client actually expects."),"\n",(0,o.kt)("strong",{parentName:"p"},"See the following issue to track this:"),"\n",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"https://github.com/apollographql/subscriptions-transport-ws/issues/551"},"https://github.com/apollographql/subscriptions-transport-ws/issues/551"))),(0,o.kt)("p",null,"The implementation is built on ",(0,o.kt)("inlineCode",{parentName:"p"},"package:stream_channel"),", and\ntherefore can be used on any two-way transport, whether it is\nWebSockets, TCP sockets, Isolates, or otherwise."),(0,o.kt)("p",null,"Users of this package are expected to extend the ",(0,o.kt)("inlineCode",{parentName:"p"},"Server"),"\nabstract class. ",(0,o.kt)("inlineCode",{parentName:"p"},"Server")," will handle the transport and communication,\nbut again, ultimately, emitting subscription events is up to your\nimplementation."),(0,o.kt)("p",null,"Here's a snippet from ",(0,o.kt)("inlineCode",{parentName:"p"},"graphQLWebSocket")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"package:leto_shelf"),".\nIt runs within the context of one single request:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final channel = IOWebSocketChannel(socket);\nfinal client = stw.RemoteClient(channel.cast<String>());\nfinal server =\n    GraphQLWebSocketShelfSServer(client, graphQL, req, res, keepAliveInterval);\nawait server.done;\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("inlineCode",{parentName:"p"},"graphQLWebSocket")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"package:leto_shelf")," for a good example:\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_shelf/lib/src/graphql_ws.dart"},"https://github.com/juancastillo0/leto/tree/main/leto_shelf/lib/src/graphql_ws.dart")))}u.isMDXComponent=!0}}]);