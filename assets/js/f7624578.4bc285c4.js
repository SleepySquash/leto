"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[264],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(r),h=a,d=u["".concat(p,".").concat(h)]||u[h]||m[h]||o;return r?n.createElement(d,l(l({ref:t},c),{},{components:r})):n.createElement(d,l({ref:t},c))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},955:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:1},l="leto_schema",i={unversionedId:"leto_schema/leto_schema",id:"leto_schema/leto_schema",title:"leto_schema",description:"An implementation of GraphQL's type system in Dart. Supports any platform where Dart runs.",source:"@site/docs/leto_schema/leto_schema.md",sourceDirName:"leto_schema",slug:"/leto_schema/",permalink:"/leto/docs/leto_schema/",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_schema/README.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"leto_schema",permalink:"/leto/docs/category/leto_schema"},next:{title:"GraphQL Types",permalink:"/leto/docs/leto_schema/graphql-types"}},p={},s=[{value:"Usage",id:"usage",level:2}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"leto_schema"},"leto_schema"),(0,a.kt)("p",null,"An implementation of GraphQL's type system in Dart. Supports any platform where Dart runs.\nThe decisions made in the design of this library were done to make the experience\nas similar to the JavaScript reference implementation as possible, and to also\ncorrectly implement the official specification."),(0,a.kt)("p",null,"Contains functionality to build ",(0,a.kt)("em",{parentName:"p"},"all")," GraphQL types:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Int")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Float")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Boolean")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GraphQLObjectType")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GraphQLUnionType")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GraphQLEnumType")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GraphQLInputObjectType")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Date")," - ISO-8601 Date string, deserializes to a Dart ",(0,a.kt)("inlineCode",{parentName:"li"},"DateTime")," object")),(0,a.kt)("p",null,"Of course, for a full description of GraphQL's type system, see the official\nspecification:\n",(0,a.kt)("a",{parentName:"p",href:"http://spec.graphql.org/draft/#sec-Type-System"},"http://spec.graphql.org/draft/#sec-Type-System")),(0,a.kt)("p",null,"Mostly analogous to ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-js"),"; many names are verbatim:\n",(0,a.kt)("a",{parentName:"p",href:"https://graphql.org/graphql-js/type/"},"https://graphql.org/graphql-js/type/")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"It's easy to define a schema with the ",(0,a.kt)("a",{parentName:"p",href:"/leto/docs/leto_schema/graphql-types#helpers-and-extensions"},"helper functions"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final todoSchema = GraphQLSchema(\n  query: objectType(\n    'Todo',\n    fields: [\n      field('text', graphQLString.nonNullable()),\n      field('created_at', graphQLDate),\n    ],\n  ),\n);\n")),(0,a.kt)("p",null,"All GraphQL types are generic, in order to leverage Dart's strong typing support."))}m.isMDXComponent=!0}}]);