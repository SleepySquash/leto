"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8264],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1},i="Leto",l={unversionedId:"leto/leto",id:"leto/leto",title:"Leto",description:"Base package for implementing GraphQL servers executors. The main entrypoint is the GraphQL.parseAndExecute method which parses a GraphQL document and executes it with the configured GraphQLSchema from package:leto_schema.",source:"@site/docs/leto/leto.md",sourceDirName:"leto",slug:"/leto/",permalink:"/leto/docs/leto/",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto/README.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"leto",permalink:"/leto/docs/category/leto"},next:{title:"GraphQL Executor",permalink:"/leto/docs/leto/graphql-executor"}},p={},s=[{value:"Ad-hoc Usage",id:"ad-hoc-usage",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"leto"},"Leto"),(0,a.kt)("p",null,"Base package for implementing GraphQL servers executors. The main entrypoint is the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQL.parseAndExecute")," method which parses a GraphQL document and executes it with the configured ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," from ",(0,a.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"package:leto")," does not require any specific framework, and thus can be used in any Dart project."),(0,a.kt)("h2",{id:"ad-hoc-usage"},"Ad-hoc Usage"),(0,a.kt)("p",null,"The actual querying functionality is handled by the\n",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQL")," class, which takes a schema (from ",(0,a.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),").\nIn most cases, you'll want to call ",(0,a.kt)("inlineCode",{parentName:"p"},"parseAndExecute"),"\non some string of GraphQL text. It returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLResult")," with either a\n",(0,a.kt)("inlineCode",{parentName:"p"},"Map<String, dynamic>")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream<GraphQLResult>")," for subscriptions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"try {\n    final GraphQLResult result = await graphQL.parseAndExecute(responseText);\n    final data = result.data;\n    if (data is Stream<GraphQLResult>) {\n        // Handle a subscription somehow...\n    } else if (data is Map<String, Object?>) {\n        response.send({'data': data});\n    } else {\n        // Handle errors\n        final bool didExecute = result.didExecute;\n        final List<GraphQLError> errors = result.errors;\n    }\n} catch (e) {\n    // Not usually necessary, only when a specify extension throws.\n    response.send(e.toJson());\n}\n")),(0,a.kt)("p",null,"Consult the API reference for more:\n",(0,a.kt)("a",{parentName:"p",href:"https://pub.dev/documentation/leto/latest/leto/GraphQL/parseAndExecute.html"},"https://pub.dev/documentation/leto/latest/leto/GraphQL/parseAndExecute.html")),(0,a.kt)("p",null,"If you're looking for functionality like ",(0,a.kt)("inlineCode",{parentName:"p"},"graphQLHttp")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-js"),", that is not included in this package, because\nit is typically specific to the framework/platform you are using. The ",(0,a.kt)("inlineCode",{parentName:"p"},"graphQLHttp")," implementation in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_shelf"},(0,a.kt)("inlineCode",{parentName:"a"},"package:leto_shelf"))," is a good example."))}u.isMDXComponent=!0}}]);