"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9722],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,i(i({ref:t},p),{},{components:n})):r.createElement(m,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5758:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="GraphQL Executor",l={unversionedId:"leto/graphql-executor",id:"leto/graphql-executor",title:"GraphQL Executor",description:"The executor can be configured with the following parameters:",source:"@site/docs/leto/graphql-executor.md",sourceDirName:"leto",slug:"/leto/graphql-executor",permalink:"/leto/docs/leto/graphql-executor",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto/README.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"leto",permalink:"/leto/docs/leto/"},next:{title:"DataLoader",permalink:"/leto/docs/leto/dataloader"}},s={},c=[{value:"<code>GraphQLConfig</code>",id:"graphqlconfig",level:3},{value:"<code>GraphQL.parseAndExecute</code>",id:"graphqlparseandexecute",level:2},{value:"GraphQL Request Arguments",id:"graphql-request-arguments",level:3},{value:"<code>ScopedOverride</code> List",id:"scopedoverride-list",level:3},{value:"<code>InvalidOperationType</code>",id:"invalidoperationtype",level:3},{value:"Introspection",id:"introspection",level:2},{value:"Extensions",id:"extensions",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"graphql-executor"},"GraphQL Executor"),(0,a.kt)("p",null,"The executor can be configured with the following parameters:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"  /// Extensions implement additional functionalities to the\n  /// server's parsing, validation and execution.\n  /// For example, extensions for tracing [GraphQLTracingExtension],\n  /// logging, error handling or caching [GraphQLPersistedQueries]\n  final List<GraphQLExtension> extensions;\n\n  /// An optional callback that can be used to resolve fields\n  /// from objects that are not [Map]s, when the related field has no resolver.\n  final FutureOr<Object?> Function(Object? parent, Ctx)? defaultFieldResolver;\n\n  /// Variables passed to all executed requests\n  final ScopedMap baseGlobalVariables;\n\n  /// If validate is false, a parsed document is executed without\n  /// being validated with the provided schema\n  final bool validate;\n\n  /// Whether to introspect the [GraphQLSchema]\n  ///\n  /// This will change the Query type of the [schema] by adding\n  /// introspection fields, useful for client code generators or other\n  /// tools like UI explorers.\n  final bool introspect;\n\n  /// The schema used for executing GraphQL requests\n  final GraphQLSchema schema;\n\n  /// Custom validation rules performed to a request's document\n  /// before the execution phase\n  final List<ValidationRule> customValidationRules;\n\n")),(0,a.kt)("h3",{id:"graphqlconfig"},(0,a.kt)("inlineCode",{parentName:"h3"},"GraphQLConfig")),(0,a.kt)("p",null,"You can also use the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQLConfig")," class and the ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQL.fromConfig")," constructor for creating an executor from a configuration class."),(0,a.kt)("h2",{id:"graphqlparseandexecute"},(0,a.kt)("inlineCode",{parentName:"h2"},"GraphQL.parseAndExecute")),(0,a.kt)("p",null,"The main entry point. Exceptions may be thrown by extensions"),(0,a.kt)("h3",{id:"graphql-request-arguments"},"GraphQL Request Arguments"),(0,a.kt)("p",null,"String query\nString? operationName\nMap<String, Object?>? variableValues\nMap<String, Object?>? extensions\nObject? rootValue"),(0,a.kt)("h3",{id:"scopedoverride-list"},(0,a.kt)("inlineCode",{parentName:"h3"},"ScopedOverride")," List"),(0,a.kt)("p",null,"List<ScopedOverride",">","? scopeOverrides"),(0,a.kt)("h3",{id:"invalidoperationtype"},(0,a.kt)("inlineCode",{parentName:"h3"},"InvalidOperationType")),(0,a.kt)("p",null,"The execution may throw an ",(0,a.kt)("inlineCode",{parentName:"p"},"InvalidOperationType")," if the validOperationTypes argument is passed and the operation in the document is not one of the valid operations. Useful for HTTP safe methods (like GET) used for mutations (this is already handled in ",(0,a.kt)("inlineCode",{parentName:"p"},"package:leto_shelf"),")."),(0,a.kt)("h2",{id:"introspection"},"Introspection"),(0,a.kt)("p",null,"Introspection of a GraphQL schema allows clients to query the schema itself,\nand get information about the response the server expects. The ",(0,a.kt)("inlineCode",{parentName:"p"},"GraphQL"),"\nclass handles this automatically, so you don't have to write any code for it."),(0,a.kt)("p",null,"However, you can call the ",(0,a.kt)("inlineCode",{parentName:"p"},"reflectSchema")," method to manually reflect a schema:\n",(0,a.kt)("a",{parentName:"p",href:"https://pub.dartlang.org/documentation/leto/latest/introspection/reflectSchema.html"},"https://pub.dartlang.org/documentation/leto/latest/introspection/reflectSchema.html")),(0,a.kt)("h2",{id:"extensions"},"Extensions"),(0,a.kt)("p",null,"You can read more about extensions in the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/README.md#extensions"},"main README"),". The main API with all the methods that can be overridden is found in ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto/lib/src/extensions/extension.dart"},"this file"),"."))}u.isMDXComponent=!0}}]);