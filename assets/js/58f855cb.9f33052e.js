"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7900],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return a?n.createElement(m,i(i({ref:t},c),{},{components:a})):n.createElement(m,i({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},4552:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:8},i="Miscellaneous",l={unversionedId:"main/miscellaneous",id:"main/miscellaneous",title:"Miscellaneous",description:"GraphQLResult",source:"@site/docs/main/miscellaneous.md",sourceDirName:"main",slug:"/main/miscellaneous",permalink:"/leto/docs/main/miscellaneous",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Validation",permalink:"/leto/docs/main/validation"},next:{title:"Solving the N+1 problem",permalink:"/leto/docs/main/solving-the-n+1-problem"}},s={},p=[{value:"<code>GraphQLResult</code>",id:"graphqlresult",level:2},{value:"<code>ScopedMap</code>",id:"scopedmap",level:2},{value:"<code>GlobalsHolder</code>",id:"globalsholder",level:3},{value:"<code>ScopeRef</code> and <code>RefWithDefault</code>",id:"scoperef-and-refwithdefault",level:3},{value:"Example usage",id:"example-usage",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Exceptions and <code>GraphQLError</code>",id:"exceptions-and-graphqlerror",level:3},{value:"Result types",id:"result-types",level:3},{value:"Error lists and interfaces",id:"error-lists-and-interfaces",level:3},{value:"Hot Reload and Cycles",id:"hot-reload-and-cycles",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"miscellaneous"},"Miscellaneous"),(0,r.kt)("h2",{id:"graphqlresult"},(0,r.kt)("inlineCode",{parentName:"h2"},"GraphQLResult")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://spec.graphql.org/draft/#sec-Response"},"GraphQL Specification")),(0,r.kt)("p",null,"The returned ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLResult")," is the output of the execution of a GraphQL request it contains the encountered ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLError"),"s, the output ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions")," and the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," payload. The ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLResult.toJson")," Map is used by ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_shelf")," when constructing an HTTP response's body."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," is a ",(0,r.kt)("inlineCode",{parentName:"p"},"Map<String, Object?>?")," for Queries and Mutations or a ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream<GraphQLResult>")," for subscriptions. It has the payload returned by the resolvers during execution. Will be null if there was an error in validation or in the execution of a non-nullable root field. If there was an error in validation, the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," property will not be set in the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLResult.toJson")," Map following the ",(0,r.kt)("a",{parentName:"p",href:"http://spec.graphql.org/draft/#sec-Response"},"spec"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"errors")," contain the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLError"),"s encountered during validation or execution. If a resolver throws an error, it will appear in this error list. If the field's return type is nullable, a null value will be set as the output for that field. If the type is non-nullable the resolver will continue to throw an exception until a nullable field is reached or the root resolver is reached (in this case the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLResult.data")," property will be null).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions")," is a  ",(0,r.kt)("inlineCode",{parentName:"p"},"Map<String, Object?>?")," with custom values that you may want to provide to the client. All values should be serializable since they may be returned as part of an HTTP response. Most ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLExtensions")," modify this values to provide additional functionalities. The keys for the ",(0,r.kt)("inlineCode",{parentName:"p"},"extensions")," Map should be unique, you may want to prefix them with an identifier such as a package name."))),(0,r.kt)("h2",{id:"scopedmap"},(0,r.kt)("inlineCode",{parentName:"h2"},"ScopedMap")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto_schema/lib/src/req_ctx.dart"},"Source code")),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"ScopedMap")," allows you to pass and use dependencies or services within your resolvers or extensions. It consists of multiple maps, one for each scope, and a set of immutable references (or keys) with overridable defaults. "),(0,r.kt)("p",null,"To retrieve a value from a reference, the map checks whether a value was already instantiated for the scope or in any of its parents. If it has not been instantiated, the default is returned and saved in the scope."),(0,r.kt)("p",null,"This forms a tree of scopes, where one node scope has access to its parent values."),(0,r.kt)("p",null,"To override the value of a reference for a given scope you instantiate a ",(0,r.kt)("inlineCode",{parentName:"p"},"ScopedMap")," with the values to override, if it is a child, you can pass the parent as a parameter to the constructor."),(0,r.kt)("h3",{id:"globalsholder"},(0,r.kt)("inlineCode",{parentName:"h3"},"GlobalsHolder")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobalsHolder")," is simply an object that contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"ScopedMap get globals;")," getter. This map represents the scope associated with the object. As discussed in the ",(0,r.kt)("a",{parentName:"p",href:"resolvers#request-contexts"},"Request Contexts section"),", all contexts are (implement) ",(0,r.kt)("inlineCode",{parentName:"p"},"GlobalsHolder"),"s and therefore have access to the values in the scope."),(0,r.kt)("h3",{id:"scoperef-and-refwithdefault"},(0,r.kt)("inlineCode",{parentName:"h3"},"ScopeRef")," and ",(0,r.kt)("inlineCode",{parentName:"h3"},"RefWithDefault")),(0,r.kt)("p",null,"You can specify the behavior and the default values of references using ",(0,r.kt)("inlineCode",{parentName:"p"},"ScopeRef")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RefWithDefault"),'. As explained in the source code docs, a "global" ref will instantiate a value accessible to all scopes in a scope tree. A "local" ref will instantiate the value (and make it accessible) only to children scopes in which the value is instantiated.'),(0,r.kt)("h3",{id:"example-usage"},"Example usage"),(0,r.kt)("p",null,"Example usage with the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL")," executor and different ways to override the values is shown in the following code snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"final RefWithDefault<int> ref = RefWithDefault.global((ScopedMap scope) => 4);\nfinal schema = GraphQLSchema(\n  queryObject: objectType(\n    'Query', \n    fields: [\n      graphQLint.field('fieldName', (ctx) => ref.get(ctx)),\n    ],\n  ),\n);\n\nfinal executorWithDefault = GraphQL(schema);\n\nvar result = await executorWithDefault.parseAndExecute('{fieldName}');\nvar data = result.data as Map<String, Object?>;\nassert(data['fieldName'] == 4);\n\nresult = await executorWithDefault.parseAndExecute(\n  '{fieldName}', \n  globalVariables: {\n    ref: 6,\n  },\n);\ndata = result.data as Map<String, Object?>;\nassert(data['fieldName'] == 6);\n\nfinal executorWithOverride = GraphQL(\n  schema,\n  globalVariables: ScopedMap(\n    {\n      ref: 5,\n    },\n  ),\n);\n\nresult = await executorWithOverride.parseAndExecute('{fieldName}');\ndata = result.data as Map<String, Object?>;\nassert(data['fieldName'] == 5);\n")),(0,r.kt)("h2",{id:"error-handling"},"Error Handling"),(0,r.kt)("p",null,"One typically has multiple options to represent and let the client know that there was an error in the request."),(0,r.kt)("p",null,"If using HTTP (or WebSockets) fatal errors such as a malformed query string are already handled and follow the spec in each case."),(0,r.kt)("h3",{id:"exceptions-and-graphqlerror"},"Exceptions and ",(0,r.kt)("inlineCode",{parentName:"h3"},"GraphQLError")),(0,r.kt)("p",null,"If an error does not require a different type to be expressed and a more implicit approach is preferable, perhaps for errors that happen in most endpoints (authentication, authorization, input validation), one can use exceptions and send the necessary information through custom extensions in the payload."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"@Query()\nFuture<int> userChats(Ctx ctx) async {\n  final user = await userFromCtx(ctx);\n  if (user == null) {\n    throw GraphQLError(\n      'This endpoint requires an authenticated user.', // message\n      extensions: {\n        'appError': {\n          'code': 'UNAUTHENTICATED',\n        },\n      },\n      // You can also pass a `sourceError` and `stackTrace` if the given error\n      // was generated from an exception\n      // sourceError, \n      // stackTrace,\n    );\n  } \n  // You could also throw a list of errors with GraphQLException\n  final errors = [\n    if (!user.emailVerified)\n      GraphQLError(\n        'This functionality requires that you verify your email.', // message\n        extensions: {\n          'appError': {\n            'code': 'UNVERIFIED_EMAIL',\n          },\n        },\n      ),\n    if (!user.canReadUserChats)\n      GraphQLError(\n        'You do not have access to this functionality.', // message\n        extensions: {\n          'appError': {\n            'code': 'UNAUTHORIZED',\n          },\n        },\n      ),\n    ];\n  if (errors.isNotEmpty) throw GraphQLException(errors);\n  // AUTHORIZED, now get the userChats\n}\n")),(0,r.kt)("p",null,'Of course, this could be abstracted and structured in a better way. For example, the "UNAUTHENTICATED" error could be a constant or it could be thrown inside ',(0,r.kt)("inlineCode",{parentName:"p"},"userFromCtx(ctx)")," call. The ",(0,r.kt)("inlineCode",{parentName:"p"},"appError")," key could be anything you want, but is has to be unique to avoid overriding other extensions."),(0,r.kt)("h3",{id:"result-types"},"Result types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Result")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nSomethingT! when the operation was successful or SomethingE! when an error was encountered.\n"""\ntype ResultSomethingTSomethingE {\n  ok: SomethingT\n  err: SomethingE\n  isOk: Boolean!\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ResultU")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'"""\nSomethingT when the operation was successful or SomethingE when an error was encountered.\n"""\nunion ResultUSomethingTSomethingE = SomethingT | SomethingE\n')),(0,r.kt)("h3",{id:"error-lists-and-interfaces"},"Error lists and interfaces"),(0,r.kt)("p",null,'The error in the result union or object could be a simple object specific to the resolver. However, it could also by an union, an object that implements an "ApplicationError" interface or a list of errors, where the errors could also be of union type or objects that implement interfaces, or both. For a more thorough discussion on the topic, this ',(0,r.kt)("a",{parentName:"p",href:"https://productionreadygraphql.com/2020-08-01-guide-to-graphql-errors"},"guide to GraphQL errors")," may help you."),(0,r.kt)("h2",{id:"hot-reload-and-cycles"},"Hot Reload and Cycles"),(0,r.kt)("p",null,"Since type and field schema definitions should probably be reused, this may pose a conflict to the beautifully hot reload capabilities of Dart. The cached instances will not change unless you execute the more expensive hot restart, which may also cause you to lose other state when developing."),(0,r.kt)("p",null,"Because of this, we provide an utility class ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableDefinition")," that handles definition caching, helps with cycles in instantiation and controls the re-instantiation of values. It receives a ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," function that should return a new instance of the value. This value will be cached and reused throughout the schema's construction. To retrieve the current instance you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableDefinition.value")," getter. "),(0,r.kt)("p",null,"The provided ",(0,r.kt)("inlineCode",{parentName:"p"},"create")," function receives a ",(0,r.kt)("inlineCode",{parentName:"p"},"setValue")," callback that should be called right after the instance's creation (with the newly constructed instance as argument), this is only necessary if the instance definition may contain cycles."),(0,r.kt)("p",null,"To re-instantiate all values that use ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableDefinition")," you can execute the static ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableDefinition.incrementCounter")," which will invalidate previously created instances, if you call ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableDefinition.value")," again, a new instance will be created with the, potentially new, hot reloaded code."),(0,r.kt)("p",null,"When using code generation all schema definitions use the ",(0,r.kt)("inlineCode",{parentName:"p"},"HotReloadableDefinition")," class to create type and field instances, you only need to call the generated ",(0,r.kt)("inlineCode",{parentName:"p"},"recreateGraphQLApiSchema")," function to instantiate the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," each time the application hot reloads."),(0,r.kt)("p",null,"You can use other packages to hot reload the dart virtual machine (vm), for example:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If using shelf you may want to try ",(0,r.kt)("a",{parentName:"li",href:"https://pub.dev/packages/shelf_hotreload"},"https://pub.dev/packages/shelf_hotreload"),". Most shelf examples in this repository already use this package."),(0,r.kt)("li",{parentName:"ul"},"You could also search in ",(0,r.kt)("a",{parentName:"li",href:"https://pub.dev"},"https://pub.dev")," or try ",(0,r.kt)("a",{parentName:"li",href:"https://pub.dev/packages/hotreloader"},"https://pub.dev/packages/hotreloader"),", which is used by ",(0,r.kt)("inlineCode",{parentName:"li"},"package:shelf_hotreload"),".")))}u.isMDXComponent=!0}}]);