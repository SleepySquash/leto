"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5746],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),u=r,m=h["".concat(i,".").concat(u)]||h[u]||d[u]||o;return n?a.createElement(m,s(s({ref:t},c),{},{components:n})):a.createElement(m,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4277:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:2,tags:["tutorial"]},s="Quickstart",l={unversionedId:"main/quickstart",id:"main/quickstart",title:"Quickstart",description:"This provides a simple introduction to Leto, you can explore more in the following sections of this README or by looking at the tests, documentation and examples for each package. A fullstack Dart example with Flutter client and Leto/Shelf server can be found in https://github.com/juancastillo0/leto/tree/main/chat_example",source:"@site/docs/main/quickstart.md",sourceDirName:"main",slug:"/main/quickstart",permalink:"/leto/docs/main/quickstart",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/README.md",tags:[{label:"tutorial",permalink:"/leto/docs/tags/tutorial"}],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,tags:["tutorial"]},sidebar:"tutorialSidebar",previous:{title:"Leto - GraphQL Server",permalink:"/leto/docs/main/leto-graphql-server"},next:{title:"Examples",permalink:"/leto/docs/main/examples"}},i={},p=[{value:"Install",id:"install",level:2},{value:"Create a <code>GraphQLSchema</code>",id:"create-a-graphqlschema",level:2},{value:"Using Code Generation",id:"using-code-generation",level:3},{value:"Start the server",id:"start-the-server",level:2},{value:"Test the server",id:"test-the-server",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quickstart"},"Quickstart"),(0,r.kt)("p",null,"This provides a simple introduction to Leto, you can explore more in the following sections of this README or by looking at the tests, documentation and examples for each package. A fullstack Dart example with Flutter client and Leto/Shelf server can be found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/chat_example"},"https://github.com/juancastillo0/leto/tree/main/chat_example")),(0,r.kt)("p",null,"The source code for this quickstart can be found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/main/leto_shelf/example/lib/quickstart_server.dart"},"https://github.com/juancastillo0/leto/blob/main/leto_shelf/example/lib/quickstart_server.dart"),"."),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)("p",null,"Add dependencies to your pubspec.yaml"),(0,r.kt)("p",null,"All packages haven't been published at the moment. You can use them directly from git as explained in this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/issues/3"},"issue")," or you could also clone the repository locally and use relative dependencies like this ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/blob/df12485d0edc4e2d1016a581113c3411922137c5/chat_example/server/pubspec.yaml"},"example"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  leto_schema: ^0.0.1\n  leto: ^0.0.1\n  leto_shelf: ^0.0.1\n  shelf: ^1.0.0\n  shelf_router: ^1.0.0\n  # Not nessary for the server, just for testing it\n  http: ^1.0.0\n\ndev_dependencies:\n  # Only if you use code generation\n  leto_generator: ^0.0.1\n  build_runner: ^2.0.0\n")),(0,r.kt)("h2",{id:"create-a-graphqlschema"},"Create a ",(0,r.kt)("inlineCode",{parentName:"h2"},"GraphQLSchema")),(0,r.kt)("p",null,"Specify the logic for your server, this could be anything such as accessing a database, reading a file or sending an http request. We will use a controller class with a stream that emits events on mutation to support subscriptions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"// this annotations is only necessary for code generation\n@GraphQLObject()\nclass Model {\n  final String state;\n  final DateTime createdAt;\n\n  const Model(this.state, this.createdAt);\n}\n\n/// Set up your state.\n/// This could be anything such as a database connection.\n///\n/// Global means that there will only be one instance of [ModelController]\n/// for this reference. As opposed to [ScopedRef.local] where there will be\n/// one [ModelController] for each request (for saving user information\n/// or a [DataLoader], for example).\nfinal stateRef = ScopedRef<ModelController>.global(\n  (scope) => ModelController(\n    Model('InitialState', DateTime.now()),\n  ),\n);\n\nclass ModelController {\n  Model? _value;\n  Model? get value => _value;\n\n  final _streamController = StreamController<Model>.broadcast();\n  Stream<Model> get stream => _streamController.stream;\n\n  ModelController(this._value);\n\n  void setValue(Model newValue) {\n    if (newValue.state == 'InvalidState') {\n      // This will appear as an GraphQLError in the response.\n      // You can pass more information using custom extensions.\n      throw GraphQLError(\n        \"Can't be in InvalidState.\",\n        extensions: {'errorCodeExtension': 'INVALID_STATE'},\n      );\n    }\n    _value = newValue;\n    _streamController.add(newValue);\n  }\n}\n")),(0,r.kt)("p",null,"With the logic that you want to expose, you can create the GraphQLSchema instance and access the controller state using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ctx")," for each resolver and the ",(0,r.kt)("inlineCode",{parentName:"p"},"ScopedRef.get")," method. The following is a schema with Query, Mutation and Subscription with a simple model. However, GraphQL is a very expressive language with ",(0,r.kt)("a",{parentName:"p",href:"#unions"},"Unions"),", ",(0,r.kt)("a",{parentName:"p",href:"#enums"},"Enums"),", ",(0,r.kt)("a",{parentName:"p",href:"#inputs-and-input-objects"},"complex Input Objects"),", ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/graphql-schema-types/wrapping-types"},"collections")," and more. For more documentation on writing GraphQL Schemas with Leto you can read the following sections, tests and examples for each package."),(0,r.kt)("p",null,"To expose this logic, we could implement the following GraphQL API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},'type Query {\n  """Get the current state"""\n  getState: Model\n}\n\ntype Model {\n  state: String!\n  createdAt: Date!\n}\n\n"""An ISO-8601 Date."""\nscalar Date\n\ntype Mutation {\n  setState(\n    """The new state, can\'t be \'WrongState\'!."""\n    newState: String!\n  ): Boolean!\n}\n\ntype Subscription {\n  onStateChange: Model!\n}\n')),(0,r.kt)("p",null,"This could be exposed by using ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_schema")," API as shown in the following code sample or more simply by ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/quickstart#using-code-generation"},"using code generation"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"/// Create a [GraphQLSchema].\n/// All of this can be generated automatically using `package:leto_generator`\nGraphQLSchema makeGraphQLSchema() {\n  // The [Model] GraphQL Object type. It will be used in the schema\n  final GraphQLObjectType<Model> modelGraphQLType = objectType<Model>(\n    'Model',\n    fields: [\n      // All the fields that you what to expose\n      graphQLString.nonNull().field(\n            'state',\n            resolve: (Model model, Ctx ctx) => model.state,\n          ),\n      graphQLDate.nonNull().field(\n            'createdAt',\n            resolve: (Model model, Ctx ctx) => model.createdAt,\n          ),\n    ],\n  );\n  // The executable schema. The `queryType`, `mutationType`\n  // and `subscriptionType` are should be GraphQL Object types\n  final schema = GraphQLSchema(\n    queryType: objectType('Query', fields: [\n      // Use the created [modelGraphQLType] as the return type for the\n      // \"getState\" root Query field\n      modelGraphQLType.field(\n        'getState',\n        description: 'Get the current state',\n        resolve: (Object? rootValue, Ctx ctx) => stateRef.get(ctx).value,\n      ),\n    ]),\n    mutationType: objectType('Mutation', fields: [\n      graphQLBoolean.nonNull().field(\n        'setState',\n        // set up the input field. could also be done with\n        // `graphQLString.nonNull().inputField('newState')`\n        inputs: [\n          GraphQLFieldInput(\n            'newState',\n            graphQLString.nonNull(),\n            description: \"The new state, can't be 'WrongState'!.\",\n          ),\n        ],\n        // execute the mutation\n        resolve: (Object? rootValue, Ctx ctx) {\n          final newState = ctx.args['newState']! as String;\n          if (newState == 'WrongState') {\n            return false;\n          }\n          stateRef.get(ctx).setValue(Model(newState, DateTime.now()));\n          return true;\n        },\n      ),\n    ]),\n    subscriptionType: objectType('Subscription', fields: [\n      // The Subscriptions are the same as Queries and Mutations as above,\n      // but should use `subscribe` instead of `resolve` and return a `Steam`\n      modelGraphQLType.nonNull().field(\n            'onStateChange',\n            subscribe: (Object? rootValue, Ctx ctx) => stateRef.get(ctx).stream,\n          )\n    ]),\n  );\n  assert(schema.schemaStr == schemaString.trim());\n  return schema;\n}\n\n")),(0,r.kt)("p",null,"// TODO: 1T\ntype CompilerLog {\ntoString: String!"),(0,r.kt)("p",null,"TODO: 1T class ProcessExecResult implements ProcessResult {\n","[WARNING]"," leto_generator:graphql_types on lib/src/compiler_models.dart:\nCannot infer the GraphQLType for field ProcessResult.stdout (type=dynamic). Please annotate the Dart type, provide a dynamic.graphQLType static getter or add the type to ",(0,r.kt)("inlineCode",{parentName:"p"},"build.yaml"),' "customTypes" property.\n',"[WARNING]"," leto_generator:graphql_types on lib/src/compiler_models.dart:\nCannot infer the GraphQLType for field ProcessResult.stderr (type=dynamic). Please annotate the Dart type, provide a dynamic.graphQLType static getter or add the type to ",(0,r.kt)("inlineCode",{parentName:"p"},"build.yaml"),' "customTypes" property.'),(0,r.kt)("h3",{id:"using-code-generation"},"Using Code Generation"),(0,r.kt)("p",null,"You can use code generation to create a function similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"makeGraphQLSchema")," with the following resolver definitions with annotations."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"/// Code Generation\n/// Using leto_generator, [makeGraphQLSchema] could be generated\n/// with the following annotated functions and the [GraphQLObject]\n/// annotation over [Model]\n\n/// Get the current state\n@Query()\nModel? getState(Ctx ctx) {\n  return stateRef.get(ctx).value;\n}\n\n@Mutation()\nbool setState(\n  Ctx ctx,\n  // The new state, can't be 'WrongState'!.\n  String newState,\n) {\n  if (newState == 'WrongState') {\n    return false;\n  }\n\n  stateRef.get(ctx).setValue(Model(newState, DateTime.now()));\n  return true;\n}\n\n@Subscription()\nStream<Model> onStateChange(Ctx ctx) {\n  return stateRef.get(ctx).stream;\n}\n")),(0,r.kt)("p",null,"This generates the same ",(0,r.kt)("inlineCode",{parentName:"p"},"modelGraphQLType")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"<file>.g.dart")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"graphqlApiSchema")," in 'lib/graphql_api.schema.dart' (TODO: 1G configurable). The documentation comments will be used as description in the generated schema. More information on code generation can be found in the following sections, in the ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_generator"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_generator"},"README")," or in the code generation ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_generator/example"},"example"),"."),(0,r.kt)("h2",{id:"start-the-server"},"Start the server"),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," and the resolver logic implemented, we can set up the shelf handlers for each route. In this case we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"graphQLHttp"),' handlers for the "/graphql" endpoint and ',(0,r.kt)("inlineCode",{parentName:"p"},"graphQLWebSocket"),' for "/graphql-subscription" which supports subscriptions. You could provide custom extensions, document validations or a ',(0,r.kt)("inlineCode",{parentName:"p"},"ScopedMap")," to override the state in the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL")," executor constructor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<HttpServer> runServer({int? serverPort, ScopedMap? globals}) async {\n  // you can override state with ScopedMap.setGlobal/setScoped\n  final ScopedMap scopedMap = globals ?? ScopedMap();\n  if (globals == null) {\n    // if it wasn't overridden it should be the default\n    assert(stateRef.get(scopedMap).value?.state == 'InitialState');\n  }\n  // Instantiate the GraphQLSchema\n  final schema = makeGraphQLSchema();\n  // Instantiate the GraphQL executor, you can pass extensions and\n  // decide whether you want to introspect the schema\n  // and validate the requests\n  final letoGraphQL = GraphQL(\n    schema,\n    extensions: [],\n    introspect: true,\n    globalVariables: scopedMap,\n  );\n\n  final port =\n      serverPort ?? const int.fromEnvironment('PORT', defaultValue: 8080);\n  const graphqlPath = 'graphql';\n  const graphqlSubscriptionPath = 'graphql-subscription';\n  final endpoint = 'http://localhost:$port/$graphqlPath';\n  final subscriptionEndpoint = 'ws://localhost:$port/$graphqlSubscriptionPath';\n\n  // Setup server endpoints\n  final app = Router();\n  // GraphQL HTTP handler\n  app.all(\n    '/$graphqlPath',\n    graphQLHttp(letoGraphQL),\n  );\n  // GraphQL WebSocket handler\n  app.all(\n    '/$graphqlSubscriptionPath',\n    graphQLWebSocket(\n      letoGraphQL,\n      pingInterval: const Duration(seconds: 10),\n      validateIncomingConnection: (\n        Map<String, Object?>? initialPayload,\n        GraphQLWebSocketShelfServer wsServer,\n      ) {\n        if (initialPayload != null) {\n          // you can authenticated an user with the initialPayload:\n          // final token = initialPayload['token']! as String;\n          // ...\n        }\n        return true;\n      },\n    ),\n  );\n")),(0,r.kt)("p",null,"In the shelf router you can specify other handlers such as static files or other utilities. In the following code we set up a ",(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/web-integrations#web-ui-explorers"},"GraphQL UI explorer"),' in the "/playground" route using the ',(0,r.kt)("inlineCode",{parentName:"p"},"playgroundHandler"),' handler and a "/graphql-schema" endpoint that returns the GraphQL schema String in the body of the response.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"  // GraphQL schema and endpoint explorer web UI.\n  // Available UI handlers: playgroundHandler, graphiqlHandler and altairHandler\n  app.get(\n    '/playground',\n    playgroundHandler(\n      config: PlaygroundConfig(\n        endpoint: endpoint,\n        subscriptionEndpoint: subscriptionEndpoint,\n      ),\n    ),\n  );\n  // Simple endpoint to download the GraphQLSchema as a SDL file.\n  // $ curl http://localhost:8080/graphql-schema > schema.graphql\n  const downloadSchemaOnOpen = true;\n  const schemaFilename = 'schema.graphql';\n  app.get('/graphql-schema', (Request request) {\n    return Response.ok(\n      schema.schemaStr,\n      headers: {\n        'content-type': 'text/plain',\n        'content-disposition': downloadSchemaOnOpen\n            ? 'attachment; filename=\"$schemaFilename\"'\n            : 'inline',\n      },\n    );\n  });\n")),(0,r.kt)("p",null,"Once you set up all the handlers, you can start the server adding middlewares if necessary. In this example, we will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"etag")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"cors")," middlewares from ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_shelf"),". You can read more about them in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_shelf"},"package's README"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"  // Set up other shelf handlers such as static files\n\n  // Start the server\n  final server = await shelf_io.serve(\n    const Pipeline()\n        // Configure middlewares\n        .addMiddleware(customLog(log: (msg) {\n          // TODO: 2A detect an introspection query.\n          //  Add more structured logs and headers\n          if (!msg.contains('IntrospectionQuery')) {\n            print(msg);\n          }\n        }))\n        .addMiddleware(cors())\n        .addMiddleware(etag())\n        .addMiddleware(jsonParse())\n        // Add Router handler\n        .addHandler(app),\n    '0.0.0.0',\n    port,\n  );\n  print(\n    'GraphQL Endpoint at $endpoint\\n'\n    'GraphQL Subscriptions at $subscriptionEndpoint\\n'\n    'GraphQL Playground UI at http://localhost:$port/playground',\n  );\n\n  return server;\n}\n")),(0,r.kt)("p",null,"With the ",(0,r.kt)("inlineCode",{parentName:"p"},"runServer")," function finished, we can now create a main function that executes it and servers the implemented logic in a GraphQL server. This function can also be used for test as shown in the ",(0,r.kt)("inlineCode",{parentName:"p"},"testServer")," function from the next section. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"Future<void> main() async {\n  final server = await runServer();\n  final url = Uri.parse('http://${server.address.host}:${server.port}/graphql');\n  await testServer(url);\n}\n")),(0,r.kt)("h2",{id:"test-the-server"},"Test the server"),(0,r.kt)("p",null,"You can test the server programmatically by sending HTTP requests to the server. You could also test the GraphQL executor directly using the ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL.parseAndExecute")," function without running the shelf server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"/// For a complete GraphQL client you probably want to use\n/// Ferry (https://github.com/gql-dart/ferry)\n/// Artemis (https://github.com/comigor/artemis)\n/// or raw GQL Links (https://github.com/gql-dart/gql/tree/master/links)\nFuture<void> testServer(Uri url) async {\n  final before = DateTime.now();\n  const newState = 'NewState';\n  // POST request which sets the state\n  final response = await http.post(\n    url,\n    body: jsonEncode({\n      'query':\n          r'mutation setState ($state: String!) { setState(newState: $state) }',\n      'variables': {'state': newState}\n    }),\n    headers: {'content-type': 'application/json'},\n  );\n  assert(response.statusCode == 200);\n  final body = jsonDecode(response.body) as Map<String, Object?>;\n  final data = body['data']! as Map<String, Object?>;\n  assert(data['setState'] == true);\n\n  // Also works with GET\n  final responseGet = await http.get(url.replace(\n    queryParameters: <String, String>{\n      'query': '{ getState { state createdAt } }'\n    },\n  ));\n  assert(responseGet.statusCode == 200);\n  final bodyGet = jsonDecode(responseGet.body) as Map<String, Object?>;\n  final dataGet = bodyGet['data']! as Map<String, dynamic>;\n  assert(dataGet['getState']['state'] == newState);\n  final createdAt = DateTime.parse(dataGet['getState']['createdAt'] as String);\n  assert(createdAt.isAfter(before));\n  assert(createdAt.isBefore(DateTime.now()));\n\n  // To test subscriptions you can open the playground web UI at /playground\n  // or programmatically using https://github.com/gql-dart/gql/tree/master/links/gql_websocket_link,\n  // an example can be found in test/mutation_and_subscription_test.dart\n}\n")),(0,r.kt)("p",null,'Test and explore the server manually in the explorer interface "http://localhost:8080/playground". It supports subscriptions, subscribe in one tab and send a mutation request in another to test it. There are other UI explorers that you can set up (for example, GraphiQL and Altair), for more information ',(0,r.kt)("a",{parentName:"p",href:"/leto/docs/main/web-integrations#web-ui-explorers"},"Web UI explorers section"),"."),(0,r.kt)("p",null,'We also set up a "http://localhost:8080/graphql-schema" endpoint which returns the GraphQL schema String in the schema definition language, this could be useful for other tools such as client side code generators.'))}d.isMDXComponent=!0}}]);