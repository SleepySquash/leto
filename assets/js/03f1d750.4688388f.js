"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4203],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>c});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},i=Object.keys(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(l=0;l<i.length;l++)a=i[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=l.createContext({}),d=function(e){var t=l.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=d(e.components);return l.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},s=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=d(a),c=n,f=s["".concat(p,".").concat(c)]||s[c]||m[c]||i;return a?l.createElement(f,r(r({ref:t},u),{},{components:a})):l.createElement(f,r({ref:t},u))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,r=new Array(i);r[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var d=2;d<i;d++)r[d]=a[d];return l.createElement.apply(null,r)}return l.createElement.apply(null,a)}s.displayName="MDXCreateElement"},3281:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var l=a(7462),n=(a(7294),a(3905));const i={sidebar_position:7},r="Global Configuration (build.yaml)",o={unversionedId:"leto_generator/global-configuration-build.yaml",id:"leto_generator/global-configuration-build.yaml",title:"Global Configuration (build.yaml)",description:"| Config            | Description                                                                                        | Type               | Default                                      |",source:"@site/docs/leto_generator/global-configuration-build.yaml.md",sourceDirName:"leto_generator",slug:"/leto_generator/global-configuration-build.yaml",permalink:"/leto/docs/leto_generator/global-configuration-build.yaml",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_generator/README.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Resolvers",permalink:"/leto/docs/leto_generator/resolvers"},next:{title:"leto_shelf",permalink:"/leto/docs/category/leto_shelf"}},p={},d=[{value:"Fields",id:"fields",level:2},{value:"TODO: 1G Name for ID GraphQLType (default: &quot;id&quot;)",id:"todo-1g-name-for-id-graphqltype-default-id",level:3},{value:"nullableFields (default: false)",id:"nullablefields-default-false",level:3},{value:"omitFields (default: false)",id:"omitfields-default-false",level:3},{value:"omitPrivateFields (default: true)",id:"omitprivatefields-default-true",level:3},{value:"Resolvers",id:"resolvers",level:2},{value:"instantiateCode (default: null)",id:"instantiatecode-default-null",level:3},{value:"customTypes",id:"customtypes",level:3},{value:"Example",id:"example",level:4},{value:"graphQLApiSchemaFile",id:"graphqlapischemafile",level:3}],u={toc:d};function m(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,l.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"global-configuration-buildyaml"},"Global Configuration (build.yaml)"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Config"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"),(0,n.kt)("th",{parentName:"tr",align:null},"Type"),(0,n.kt)("th",{parentName:"tr",align:null},"Default"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"nullableFields"),(0,n.kt)("td",{parentName:"tr",align:null},"Whether to make all fields nullable by default"),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"omitFields"),(0,n.kt)("td",{parentName:"tr",align:null},"Whether to omit all fields from the Schema. You will need to annotate each one with ",(0,n.kt)("inlineCode",{parentName:"td"},"GraphQLField")),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"omitPrivateFields"),(0,n.kt)("td",{parentName:"tr",align:null},"Whether to omit private fields from the Schema"),(0,n.kt)("td",{parentName:"tr",align:null},"bool"),(0,n.kt)("td",{parentName:"tr",align:null},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"omitFieldsNamed"),(0,n.kt)("td",{parentName:"tr",align:null},"A list of field names to omit by default"),(0,n.kt)("td",{parentName:"tr",align:null},"List<String",">"),(0,n.kt)("td",{parentName:"tr",align:null},"['toJson', 'toString', 'compareTo', 'toMap']")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"instantiateCode"),(0,n.kt)("td",{parentName:"tr",align:null},"The dependency injection code used for all Class Resolvers"),(0,n.kt)("td",{parentName:"tr",align:null},"String?"),(0,n.kt)("td",{parentName:"tr",align:null},"null")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"customTypes"),(0,n.kt)("td",{parentName:"tr",align:null},"Types for which a custom GraphQLType is provided"),(0,n.kt)("td",{parentName:"tr",align:null},"List<CustomTypes",">"),(0,n.kt)("td",{parentName:"tr",align:null},"[]")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"enumValuesCase"),(0,n.kt)("td",{parentName:"tr",align:null},"The Enum values case type (CamelCase, snake_case, ...)"),(0,n.kt)("td",{parentName:"tr",align:null},"EnumNameCase?"),(0,n.kt)("td",{parentName:"tr",align:null},"null")))),(0,n.kt)("h2",{id:"fields"},"Fields"),(0,n.kt)("h3",{id:"todo-1g-name-for-id-graphqltype-default-id"},'TODO: 1G Name for ID GraphQLType (default: "id")'),(0,n.kt)("h3",{id:"nullablefields-default-false"},"nullableFields (default: false)"),(0,n.kt)("p",null,"Available in: ",(0,n.kt)("inlineCode",{parentName:"p"},"build.yaml"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObject"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLField"),"."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),", this will make all fields nullable by default. If you want to make a field non-nullable, you will need to configure it in the class' ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObject")," annotation, which applies to all the class' fields, or in the field's ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLField")," annotation."),(0,n.kt)("h3",{id:"omitfields-default-false"},"omitFields (default: false)"),(0,n.kt)("p",null,"Available in: ",(0,n.kt)("inlineCode",{parentName:"p"},"build.yaml"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObject"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLField"),"."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),", this will omit all fields from being generated by default. If you want to generate a specific field, you will need to configure it in the class' ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObject")," annotation, which applies to all the class' fields, or in the field's ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLField")," annotation."),(0,n.kt)("h3",{id:"omitprivatefields-default-true"},"omitPrivateFields (default: true)"),(0,n.kt)("p",null,"Available in: ",(0,n.kt)("inlineCode",{parentName:"p"},"build.yaml"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLObject"),"."),(0,n.kt)("p",null,"When ",(0,n.kt)("inlineCode",{parentName:"p"},"true"),', this will omit all fields that start with a underscore "_".'),(0,n.kt)("p",null,'Following the GraphQL spec, fields that start with double underscore "__" are not allowed, they will be always be omitted.'),(0,n.kt)("h2",{id:"resolvers"},"Resolvers"),(0,n.kt)("h3",{id:"instantiatecode-default-null"},"instantiateCode (default: null)"),(0,n.kt)("p",null,"Available in: ",(0,n.kt)("inlineCode",{parentName:"p"},"build.yaml"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"ClassResolver"),"."),(0,n.kt)("h3",{id:"customtypes"},"customTypes"),(0,n.kt)("p",null,"This will allow you to specify a custom mapping from given Dart type to a ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLType"),". The mapping is done with Dart type ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," provided as a field in the ",(0,n.kt)("inlineCode",{parentName:"p"},"build.yaml")," configuration. This will override all other mapping discussed in ",(0,n.kt)("a",{parentName:"p",href:"/leto/docs/leto_generator/dart-type-to-graphqltype-coercion"},"coercing types section"),". It is a list of objects with the following properties: "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"String name;")),(0,n.kt)("p",null,"The name of the Dart type, if the name matches a Dart type's name during code generation, the ",(0,n.kt)("inlineCode",{parentName:"p"},"getter")," (next configuration) will be used as it's ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLType"),"."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"String getter;")),(0,n.kt)("p",null,"The getter is the name of the Dart getter or property of returns the ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLType"),". It should be located in the file pointed by the ",(0,n.kt)("inlineCode",{parentName:"p"},"import")," property."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"String import;")),(0,n.kt)("p",null,"The file path where the ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLType"),"'s ",(0,n.kt)("inlineCode",{parentName:"p"},"getter")," can be found."),(0,n.kt)("h4",{id:"example"},"Example"),(0,n.kt)("p",null,"To support the ",(0,n.kt)("inlineCode",{parentName:"p"},"Decimal")," type from ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/a14n/dart-decimal"},"https://github.com/a14n/dart-decimal")," you can use the following code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:decimal/decimal.dart';\nimport 'package:leto_schema/leto_schema.dart';\n\nexport 'package:decimal/decimal.dart';\n\nfinal decimalGraphQLType = GraphQLScalarTypeValue<Decimal, String>(\n  name: 'Decimal',\n  deserialize: (_, serialized) => decimalFromJson(serialized)!,\n  serialize: (value) => decimalToJson(value)!,\n  validate: (key, input) => (input is num || input is String) &&\n          Decimal.tryParse(input.toString()) != null\n      ? ValidationResult.ok(input.toString())\n      : ValidationResult.failure(\n          ['Expected $key to be a number or a numeric String.'],\n        ),\n  description: 'A number that allows computation without losing precision.',\n  specifiedByURL: null,\n);\n\nDecimal? decimalFromJson(Object? value) =>\n    value == null ? null : Decimal.parse(value as String);\n\nString? decimalToJson(Decimal? value) => value?.toString();\n")),(0,n.kt)("p",null,"And specify the following config in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/dart-lang/build/blob/master/docs/faq.md"},"build.yaml")," file."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'target:\n  default:\n    builders:\n      leto_generator:\n        options:\n          customTypes:\n            - name: "Decimal"\n            import: "package:<your_package_name>/<path_to_implementation>.dart"\n            getter: "decimalGraphQLType"\n')),(0,n.kt)("h3",{id:"graphqlapischemafile"},"graphQLApiSchemaFile"))}m.isMDXComponent=!0}}]);