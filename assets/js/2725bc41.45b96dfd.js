"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8264],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1977:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="leto",l={unversionedId:"leto/leto",id:"leto/leto",title:"leto",description:"Pub",source:"@site/docs/leto/leto.md",sourceDirName:"leto",slug:"/leto/",permalink:"/leto/docs/leto/",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto/README.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"leto",permalink:"/leto/docs/category/leto"},next:{title:"Introspection",permalink:"/leto/docs/leto/introspection"}},p={},s=[{value:"Ad-hoc Usage",id:"ad-hoc-usage",level:2},{value:"Subscriptions",id:"subscriptions",level:2}],c={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"leto"},"leto"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://pub.dartlang.org/packages/leto"},(0,r.kt)("img",{parentName:"a",src:"https://img.shields.io/pub/v/leto.svg",alt:"Pub"}))),(0,r.kt)("p",null,"Base package for implementing GraphQL servers executors."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"package:leto")," does not require any specific\nframework, and thus can be used in any Dart project."),(0,r.kt)("h2",{id:"ad-hoc-usage"},"Ad-hoc Usage"),(0,r.kt)("p",null,"The actual querying functionality is handled by the\n",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQL")," class, which takes a schema (from ",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto_schema"),").\nIn most cases, you'll want to call ",(0,r.kt)("inlineCode",{parentName:"p"},"parseAndExecute"),"\non some string of GraphQL text. It returns either a ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"Map<String, dynamic>"),", and can potentially throw\na ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQLException")," (which is JSON-serializable):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"try {\n    var data = await graphQL.parseExecute(responseText);\n\n    if (data is Stream) {\n        // Handle a subscription somehow...\n    } else {\n        response.send({'data': data});\n    }\n} on GraphQLException catch(e) {\n    response.send(e.toJson());\n}\n")),(0,r.kt)("p",null,"Consult the API reference for more:\n",(0,r.kt)("a",{parentName:"p",href:"https://pub.dartlang.org/documentation/leto/latest/leto/GraphQL/parseAndExecute.html"},"https://pub.dartlang.org/documentation/leto/latest/leto/GraphQL/parseAndExecute.html")),(0,r.kt)("p",null,"If you're looking for functionality like ",(0,r.kt)("inlineCode",{parentName:"p"},"graphQLHttp"),"\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-js"),", that is not included in this package, because\nit is typically specific to the framework/platform you are using.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},"graphQLHttp")," implementation in ",(0,r.kt)("inlineCode",{parentName:"p"},"package:angel_graphql")," is\na good example:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/angel-dart/graphql/blob/master/angel_graphql/lib/src/graphql_http.dart"},"https://github.com/angel-dart/graphql/blob/master/angel_graphql/lib/src/graphql_http.dart")),(0,r.kt)("h2",{id:"subscriptions"},"Subscriptions"),(0,r.kt)("p",null,"GraphQL queries involving ",(0,r.kt)("inlineCode",{parentName:"p"},"subscription")," operations can return\na ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream"),". Ultimately, the transport for relaying subscription\nevents to clients is not specified in the GraphQL spec, so it's\nup to you."),(0,r.kt)("p",null,"Note that in a schema like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"type TodoSubscription {\n    onTodo: TodoAdded!\n}\n\ntype TodoAdded {\n    id: ID!\n    text: String!\n    isComplete: Bool\n}\n")),(0,r.kt)("p",null,"Your Dart schema's resolver for ",(0,r.kt)("inlineCode",{parentName:"p"},"onTodo")," should be\na ",(0,r.kt)("inlineCode",{parentName:"p"},"Map")," ",(0,r.kt)("em",{parentName:"p"},"containing an ",(0,r.kt)("inlineCode",{parentName:"em"},"onTodo")," key"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"field(\n  'onTodo',\n  todoAddedType,\n  resolve: (_, __) {\n    return someStreamOfTodos()\n            .map((todo) => {'onTodo': todo});\n  },\n);\n")),(0,r.kt)("p",null,"For the purposes of reusing existing tooling (i.e. JS clients, etc.),\n",(0,r.kt)("inlineCode",{parentName:"p"},"package:leto")," rolls with an implementation of Apollo's\n",(0,r.kt)("inlineCode",{parentName:"p"},"subscriptions-transport-ws")," spec."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE: At this point, Apollo's spec is extremely out-of-sync with the protocol their client actually expects."),"\n",(0,r.kt)("strong",{parentName:"p"},"See the following issue to track this:"),"\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/apollographql/subscriptions-transport-ws/issues/551"},"https://github.com/apollographql/subscriptions-transport-ws/issues/551"))),(0,r.kt)("p",null,"The implementation is built on ",(0,r.kt)("inlineCode",{parentName:"p"},"package:stream_channel"),", and\ntherefore can be used on any two-way transport, whether it is\nWebSockets, TCP sockets, Isolates, or otherwise."),(0,r.kt)("p",null,"Users of this package are expected to extend the ",(0,r.kt)("inlineCode",{parentName:"p"},"Server"),"\nabstract class. ",(0,r.kt)("inlineCode",{parentName:"p"},"Server")," will handle the transport and communication,\nbut again, ultimately, emitting subscription events is up to your\nimplementation."),(0,r.kt)("p",null,"Here's a snippet from ",(0,r.kt)("inlineCode",{parentName:"p"},"graphQLWS")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"package:angel_graphql"),".\nIt runs within the context of one single request:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"var channel = IOWebSocketChannel(socket);\nvar client = stw.RemoteClient(channel.cast<String>());\nvar server =\n    _GraphQLWSServer(client, graphQL, req, res, keepAliveInterval);\nawait server.done;\n")),(0,r.kt)("p",null,"See ",(0,r.kt)("inlineCode",{parentName:"p"},"graphQLWS")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"package:angel_graphql")," for a good example:\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/angel-dart/graphql/blob/master/angel_graphql/lib/src/graphql_ws.dart"},"https://github.com/angel-dart/graphql/blob/master/angel_graphql/lib/src/graphql_ws.dart")))}u.isMDXComponent=!0}}]);