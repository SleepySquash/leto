"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[9486],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(a),h=n,d=u["".concat(c,".").concat(h)]||u[h]||p[h]||i;return a?r.createElement(d,o(o({ref:t},m),{},{components:a})):r.createElement(d,o({ref:t},m))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2275:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const i={sidebar_position:8},o="Utilities",l={unversionedId:"leto_schema/utilities",id:"leto_schema/utilities",title:"Utilities",description:"Most GraphQL utilities can be found in the utilities folder in package:letoschema.",source:"@site/docs/leto_schema/utilities.md",sourceDirName:"leto_schema",slug:"/leto_schema/utilities",permalink:"/leto/docs/leto_schema/utilities",draft:!1,editUrl:"https://github.com/juancastillo0/leto/edit/main/leto_schema/README.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"LookAhead",permalink:"/leto/docs/leto_schema/lookahead"},next:{title:"leto_generator",permalink:"/leto/docs/category/leto_generator"}},c={},s=[{value:"<code>buildSchema</code>",id:"buildschema",level:3},{value:"<code>printSchema</code>",id:"printschema",level:3},{value:"<code>extendSchema</code>",id:"extendschema",level:3},{value:"<code>introspectionQuery</code>",id:"introspectionquery",level:3},{value:"<code>mergeSchemas</code>",id:"mergeschemas",level:3},{value:"<code>schemaFromJson</code>",id:"schemafromjson",level:3}],m={toc:s};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"utilities"},"Utilities"),(0,n.kt)("p",null,"Most GraphQL utilities can be found in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities"},(0,n.kt)("inlineCode",{parentName:"a"},"utilities"))," folder in package:leto_schema."),(0,n.kt)("h3",{id:"buildschema"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/build_schema.dart"},(0,n.kt)("inlineCode",{parentName:"a"},"buildSchema"))),(0,n.kt)("p",null,"Create a ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," from a GraphQL Schema Definition (SDL) document String."),(0,n.kt)("h3",{id:"printschema"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/print_schema.dart"},(0,n.kt)("inlineCode",{parentName:"a"},"printSchema"))),(0,n.kt)("p",null,"Transform a ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," into a String in the GraphQL Schema Definition Language (SDL)."),(0,n.kt)("h3",{id:"extendschema"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/extend_schema.dart"},(0,n.kt)("inlineCode",{parentName:"a"},"extendSchema"))),(0,n.kt)("p",null,"Experimental. Extend a ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," with an SDL document. This will return an extended ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," with the additional types, fields, inputs and directives provided in the document."),(0,n.kt)("h3",{id:"introspectionquery"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/tree/main/leto_schema/lib/src/utilities/introspection_query.dart"},(0,n.kt)("inlineCode",{parentName:"a"},"introspectionQuery"))),(0,n.kt)("p",null,"Create an introspection document query for retrieving Schema information from a GraphQL server."),(0,n.kt)("h3",{id:"mergeschemas"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/blob/main/leto_shelf/example/lib/schema/graphql_utils.dart"},(0,n.kt)("inlineCode",{parentName:"a"},"mergeSchemas"))),(0,n.kt)("p",null,"Experimental. Merge multiple ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema"),". The output ",(0,n.kt)("inlineCode",{parentName:"p"},"GraphQLSchema")," contains all the query, mutations and subscription fields from the input schemas. Nested objects are also merged."),(0,n.kt)("h3",{id:"schemafromjson"},(0,n.kt)("a",{parentName:"h3",href:"https://github.com/juancastillo0/leto/blob/main/leto_shelf/example/lib/schema/schema_from_json.dart"},(0,n.kt)("inlineCode",{parentName:"a"},"schemaFromJson"))),(0,n.kt)("p",null,"Experimental. Build a GraphQLSchema from a JSON value, will add query, mutation, subscription and custom events on top of the provided JSON value. Will try to infer the types from the JSON structure."))}p.isMDXComponent=!0}}]);